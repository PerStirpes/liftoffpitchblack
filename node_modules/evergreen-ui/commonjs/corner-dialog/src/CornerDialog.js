"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _uiBox = require("ui-box");

var _Transition = _interopRequireDefault(require("react-transition-group/Transition"));

var _layers = require("../../layers");

var _portal = require("../../portal");

var _typography = require("../../typography");

var _buttons = require("../../buttons");

var animationEasing = {
  deceleration: "cubic-bezier(0.0, 0.0, 0.2, 1)",
  acceleration: "cubic-bezier(0.4, 0.0, 1, 1)",
  spring: "cubic-bezier(0.175, 0.885, 0.320, 1.175)"
};
var ANIMATION_DURATION = 240;

var openAnimation = _uiBox.css.keyframes('openAnimation', {
  from: {
    transform: 'translateY(100%)'
  },
  to: {
    transform: 'translateY(0)'
  }
});

var closeAnimation = _uiBox.css.keyframes('closeAnimation', {
  from: {
    transform: 'scale(1)',
    opacity: 1
  },
  to: {
    transform: 'scale(0.9)',
    opacity: 0
  }
});

var animationStyles = {
  '&[data-state="entering"], &[data-state="entered"]': {
    animation: "".concat(openAnimation, " ").concat(ANIMATION_DURATION, "ms ").concat(animationEasing.spring, " both")
  },
  '&[data-state="exiting"]': {
    animation: "".concat(closeAnimation, " 120ms ").concat(animationEasing.acceleration, " both")
  }
};

var CornerDialog =
/*#__PURE__*/
function (_PureComponent) {
  (0, _inherits2.default)(CornerDialog, _PureComponent);

  function CornerDialog(props) {
    var _this;

    (0, _classCallCheck2.default)(this, CornerDialog);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(CornerDialog).call(this, props));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleExited", function () {
      _this.setState({
        exiting: false,
        exited: true
      });

      _this.props.onCloseComplete();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleCancel", function () {
      _this.props.onCancel(_this.handleClose);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleClose", function () {
      _this.setState({
        exiting: true
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleConfirm", function () {
      _this.props.onConfirm(_this.handleClose);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "renderChildren", function () {
      var children = _this.props.children;

      if (typeof children === 'function') {
        return children({
          close: _this.handleClose
        });
      }

      if (typeof children === 'string') {
        return _react.default.createElement(_typography.Paragraph, {
          size: 400,
          color: "muted"
        }, children);
      }

      return children;
    });
    _this.state = {
      exiting: false,
      exited: !props.isShown
    };
    return _this;
  }

  (0, _createClass2.default)(CornerDialog, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (!prevProps.isShown && this.props.isShown) {
        // eslint-disable-next-line react/no-did-update-set-state
        this.setState({
          exited: false
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          title = _this$props.title,
          width = _this$props.width,
          intent = _this$props.intent,
          isShown = _this$props.isShown,
          hasFooter = _this$props.hasFooter,
          hasCancel = _this$props.hasCancel,
          cancelLabel = _this$props.cancelLabel,
          confirmLabel = _this$props.confirmLabel,
          onOpenComplete = _this$props.onOpenComplete,
          containerProps = _this$props.containerProps;
      var _this$state = this.state,
          exiting = _this$state.exiting,
          exited = _this$state.exited;
      if (exited) return null;
      return _react.default.createElement(_portal.Portal, null, _react.default.createElement(_Transition.default, {
        appear: true,
        unmountOnExit: true,
        timeout: ANIMATION_DURATION,
        in: isShown && !exiting,
        onExited: this.handleExited,
        onEntered: onOpenComplete
      }, function (state) {
        return _react.default.createElement(_layers.Card, (0, _extends2.default)({
          role: "dialog",
          backgroundColor: "white",
          elevation: 4,
          width: width,
          css: animationStyles,
          "data-state": state,
          position: "fixed",
          bottom: 16,
          right: 16,
          padding: 32
        }, containerProps), _react.default.createElement(_layers.Pane, {
          display: "flex",
          alignItems: "center",
          marginBottom: 12
        }, _react.default.createElement(_typography.Heading, {
          is: "h4",
          size: 600,
          flex: "1"
        }, title), _react.default.createElement(_buttons.IconButton, {
          height: 32,
          icon: "cross",
          appearance: "minimal",
          onClick: _this2.handleClose
        })), _react.default.createElement(_layers.Pane, {
          overflowY: "auto",
          "data-state": state
        }, _this2.renderChildren()), hasFooter && _react.default.createElement(_layers.Pane, {
          marginTop: 24,
          flexShrink: 0,
          display: "flex",
          flexDirection: "row-reverse"
        }, _react.default.createElement(_buttons.Button, {
          appearance: "primary",
          intent: intent,
          marginLeft: 8,
          onClick: _this2.handleConfirm
        }, confirmLabel), hasCancel && _react.default.createElement(_buttons.Button, {
          onClick: _this2.handleCancel
        }, cancelLabel)));
      }));
    }
  }]);
  return CornerDialog;
}(_react.PureComponent);

exports.default = CornerDialog;
CornerDialog.displayName = "CornerDialog";
(0, _defineProperty2.default)(CornerDialog, "propTypes", {
  /**
   * Children can be a string, node or a function accepting `({ close })`.
   * When passing a string, <Paragraph size={400} color="muted" /> is used to wrap the string.
   */
  children: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]).isRequired,

  /**
   * The intent of the CornerDialog. Used for the button.
   */
  intent: _propTypes.default.oneOf(['none', 'success', 'warning', 'danger']).isRequired,

  /**
   * When true, the dialog is shown.
   */
  isShown: _propTypes.default.bool,

  /**
   * Title of the Dialog. Titles should use Title Case.
   */
  title: _propTypes.default.node,

  /**
   * Function that will be called when the exit transition is complete.
   */
  onCloseComplete: _propTypes.default.func,

  /**
   * Function that will be called when the enter transition is complete.
   */
  onOpenComplete: _propTypes.default.func,

  /**
   * When true, the footer with the cancel and confirm button is shown.
   */
  hasFooter: _propTypes.default.bool,

  /**
   * Function that will be called when the confirm button is clicked.
   * This does not close the Dialog. A close function will be passed
   * as a paramater you can use to close the dialog.
   *
   * `onConfirm={(close) => close()}`
   */
  onConfirm: _propTypes.default.func,

  /**
   * Label of the confirm button.
   */
  confirmLabel: _propTypes.default.string,

  /**
   * When true, the cancel button is shown.
   */
  hasCancel: _propTypes.default.bool,

  /**
   * Function that will be called when the cancel button is clicked.
   * This closes the Dialog by default.
   *
   * `onCancel={(close) => close()}`
   */
  onCancel: _propTypes.default.func,

  /**
   * Label of the cancel button.
   */
  cancelLabel: _propTypes.default.string,

  /**
   * Width of the Dialog.
   */
  width: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),

  /**
   * Props that are passed to the dialog container.
   */
  containerProps: _propTypes.default.object
});
(0, _defineProperty2.default)(CornerDialog, "defaultProps", {
  width: 392,
  intent: 'none',
  hasFooter: true,
  confirmLabel: 'Learn More',
  hasCancel: true,
  cancelLabel: 'Close',
  onCancel: function onCancel(close) {
    return close();
  },
  onConfirm: function onConfirm(close) {
    return close();
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb3JuZXItZGlhbG9nL3NyYy9Db3JuZXJEaWFsb2cuanMiXSwibmFtZXMiOlsiYW5pbWF0aW9uRWFzaW5nIiwiZGVjZWxlcmF0aW9uIiwiYWNjZWxlcmF0aW9uIiwic3ByaW5nIiwiQU5JTUFUSU9OX0RVUkFUSU9OIiwib3BlbkFuaW1hdGlvbiIsImNzcyIsImtleWZyYW1lcyIsImZyb20iLCJ0cmFuc2Zvcm0iLCJ0byIsImNsb3NlQW5pbWF0aW9uIiwib3BhY2l0eSIsImFuaW1hdGlvblN0eWxlcyIsImFuaW1hdGlvbiIsIkNvcm5lckRpYWxvZyIsInByb3BzIiwic2V0U3RhdGUiLCJleGl0aW5nIiwiZXhpdGVkIiwib25DbG9zZUNvbXBsZXRlIiwib25DYW5jZWwiLCJoYW5kbGVDbG9zZSIsIm9uQ29uZmlybSIsImNoaWxkcmVuIiwiY2xvc2UiLCJzdGF0ZSIsImlzU2hvd24iLCJwcmV2UHJvcHMiLCJ0aXRsZSIsIndpZHRoIiwiaW50ZW50IiwiaGFzRm9vdGVyIiwiaGFzQ2FuY2VsIiwiY2FuY2VsTGFiZWwiLCJjb25maXJtTGFiZWwiLCJvbk9wZW5Db21wbGV0ZSIsImNvbnRhaW5lclByb3BzIiwiaGFuZGxlRXhpdGVkIiwicmVuZGVyQ2hpbGRyZW4iLCJoYW5kbGVDb25maXJtIiwiaGFuZGxlQ2FuY2VsIiwiUHVyZUNvbXBvbmVudCIsIlByb3BUeXBlcyIsIm9uZU9mVHlwZSIsIm5vZGUiLCJmdW5jIiwiaXNSZXF1aXJlZCIsIm9uZU9mIiwiYm9vbCIsInN0cmluZyIsIm51bWJlciIsIm9iamVjdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUEsSUFBTUEsZUFBZSxHQUFHO0FBQ3RCQyxFQUFBQSxZQUFZLGtDQURVO0FBRXRCQyxFQUFBQSxZQUFZLGdDQUZVO0FBR3RCQyxFQUFBQSxNQUFNO0FBSGdCLENB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QU9wQmIsRUFBQUEsUUFBUSxFQUFFLGtCQUFBSSxLQUFLO0FBQUEsV0FBSUEsS0FBSyxFQUFUO0FBQUEsR0FQSztBQVFwQkYsRUFBQUEsU0FBUyxFQUFFLG1CQUFBRSxLQUFLO0FBQUEsV0FBSUEsS0FBSyxFQUFUO0FBQUE7QUFSSSxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCB7IGNzcyB9IGZyb20gJ3VpLWJveCdcbmltcG9ydCBUcmFuc2l0aW9uIGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvVHJhbnNpdGlvbidcbmltcG9ydCB7IFBhbmUsIENhcmQgfSBmcm9tICcuLi8uLi9sYXllcnMnXG5pbXBvcnQgeyBQb3J0YWwgfSBmcm9tICcuLi8uLi9wb3J0YWwnXG5pbXBvcnQgeyBQYXJhZ3JhcGgsIEhlYWRpbmcgfSBmcm9tICcuLi8uLi90eXBvZ3JhcGh5J1xuaW1wb3J0IHsgQnV0dG9uLCBJY29uQnV0dG9uIH0gZnJvbSAnLi4vLi4vYnV0dG9ucydcblxuY29uc3QgYW5pbWF0aW9uRWFzaW5nID0ge1xuICBkZWNlbGVyYXRpb246IGBjdWJpYy1iZXppZXIoMC4wLCAwLjAsIDAuMiwgMSlgLFxuICBhY2NlbGVyYXRpb246IGBjdWJpYy1iZXppZXIoMC40LCAwLjAsIDEsIDEpYCxcbiAgc3ByaW5nOiBgY3ViaWMtYmV6aWVyKDAuMTc1LCAwLjg4NSwgMC4zMjAsIDEuMTc1KWBcbn1cblxuY29uc3QgQU5JTUFUSU9OX0RVUkFUSU9OID0gMjQwXG5cbmNvbnN0IG9wZW5BbmltYXRpb24gPSBjc3Mua2V5ZnJhbWVzKCdvcGVuQW5pbWF0aW9uJywge1xuICBmcm9tOiB7XG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgxMDAlKSdcbiAgfSxcbiAgdG86IHtcbiAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKDApJ1xuICB9XG59KVxuXG5jb25zdCBjbG9zZUFuaW1hdGlvbiA9IGNzcy5rZXlmcmFtZXMoJ2Nsb3NlQW5pbWF0aW9uJywge1xuICBmcm9tOiB7XG4gICAgdHJhbnNmb3JtOiAnc2NhbGUoMSknLFxuICAgIG9wYWNpdHk6IDFcbiAgfSxcbiAgdG86IHtcbiAgICB0cmFuc2Zvcm06ICdzY2FsZSgwLjkpJyxcbiAgICBvcGFjaXR5OiAwXG4gIH1cbn0pXG5cbmNvbnN0IGFuaW1hdGlvblN0eWxlcyA9IHtcbiAgJyZbZGF0YS1zdGF0ZT1cImVudGVyaW5nXCJdLCAmW2RhdGEtc3RhdGU9XCJlbnRlcmVkXCJdJzoge1xuICAgIGFuaW1hdGlvbjogYCR7b3BlbkFuaW1hdGlvbn0gJHtBTklNQVRJT05fRFVSQVRJT059bXMgJHtcbiAgICAgIGFuaW1hdGlvbkVhc2luZy5zcHJpbmdcbiAgICB9IGJvdGhgXG4gIH0sXG4gICcmW2RhdGEtc3RhdGU9XCJleGl0aW5nXCJdJzoge1xuICAgIGFuaW1hdGlvbjogYCR7Y2xvc2VBbmltYXRpb259IDEyMG1zICR7YW5pbWF0aW9uRWFzaW5nLmFjY2VsZXJhdGlvbn0gYm90aGBcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb3JuZXJEaWFsb2cgZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAvKipcbiAgICAgKiBDaGlsZHJlbiBjYW4gYmUgYSBzdHJpbmcsIG5vZGUgb3IgYSBmdW5jdGlvbiBhY2NlcHRpbmcgYCh7IGNsb3NlIH0pYC5cbiAgICAgKiBXaGVuIHBhc3NpbmcgYSBzdHJpbmcsIDxQYXJhZ3JhcGggc2l6ZT17NDAwfSBjb2xvcj1cIm11dGVkXCIgLz4gaXMgdXNlZCB0byB3cmFwIHRoZSBzdHJpbmcuXG4gICAgICovXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ub2RlLCBQcm9wVHlwZXMuZnVuY10pLmlzUmVxdWlyZWQsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW50ZW50IG9mIHRoZSBDb3JuZXJEaWFsb2cuIFVzZWQgZm9yIHRoZSBidXR0b24uXG4gICAgICovXG4gICAgaW50ZW50OiBQcm9wVHlwZXMub25lT2YoWydub25lJywgJ3N1Y2Nlc3MnLCAnd2FybmluZycsICdkYW5nZXInXSlcbiAgICAgIC5pc1JlcXVpcmVkLFxuXG4gICAgLyoqXG4gICAgICogV2hlbiB0cnVlLCB0aGUgZGlhbG9nIGlzIHNob3duLlxuICAgICAqL1xuICAgIGlzU2hvd246IFByb3BUeXBlcy5ib29sLFxuXG4gICAgLyoqXG4gICAgICogVGl0bGUgb2YgdGhlIERpYWxvZy4gVGl0bGVzIHNob3VsZCB1c2UgVGl0bGUgQ2FzZS5cbiAgICAgKi9cbiAgICB0aXRsZTogUHJvcFR5cGVzLm5vZGUsXG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW4gdGhlIGV4aXQgdHJhbnNpdGlvbiBpcyBjb21wbGV0ZS5cbiAgICAgKi9cbiAgICBvbkNsb3NlQ29tcGxldGU6IFByb3BUeXBlcy5mdW5jLFxuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBlbnRlciB0cmFuc2l0aW9uIGlzIGNvbXBsZXRlLlxuICAgICAqL1xuICAgIG9uT3BlbkNvbXBsZXRlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gdHJ1ZSwgdGhlIGZvb3RlciB3aXRoIHRoZSBjYW5jZWwgYW5kIGNvbmZpcm0gYnV0dG9uIGlzIHNob3duLlxuICAgICAqL1xuICAgIGhhc0Zvb3RlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW4gdGhlIGNvbmZpcm0gYnV0dG9uIGlzIGNsaWNrZWQuXG4gICAgICogVGhpcyBkb2VzIG5vdCBjbG9zZSB0aGUgRGlhbG9nLiBBIGNsb3NlIGZ1bmN0aW9uIHdpbGwgYmUgcGFzc2VkXG4gICAgICogYXMgYSBwYXJhbWF0ZXIgeW91IGNhbiB1c2UgdG8gY2xvc2UgdGhlIGRpYWxvZy5cbiAgICAgKlxuICAgICAqIGBvbkNvbmZpcm09eyhjbG9zZSkgPT4gY2xvc2UoKX1gXG4gICAgICovXG4gICAgb25Db25maXJtOiBQcm9wVHlwZXMuZnVuYyxcblxuICAgIC8qKlxuICAgICAqIExhYmVsIG9mIHRoZSBjb25maXJtIGJ1dHRvbi5cbiAgICAgKi9cbiAgICBjb25maXJtTGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHRydWUsIHRoZSBjYW5jZWwgYnV0dG9uIGlzIHNob3duLlxuICAgICAqL1xuICAgIGhhc0NhbmNlbDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW4gdGhlIGNhbmNlbCBidXR0b24gaXMgY2xpY2tlZC5cbiAgICAgKiBUaGlzIGNsb3NlcyB0aGUgRGlhbG9nIGJ5IGRlZmF1bHQuXG4gICAgICpcbiAgICAgKiBgb25DYW5jZWw9eyhjbG9zZSkgPT4gY2xvc2UoKX1gXG4gICAgICovXG4gICAgb25DYW5jZWw6IFByb3BUeXBlcy5mdW5jLFxuXG4gICAgLyoqXG4gICAgICogTGFiZWwgb2YgdGhlIGNhbmNlbCBidXR0b24uXG4gICAgICovXG4gICAgY2FuY2VsTGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgICAvKipcbiAgICAgKiBXaWR0aCBvZiB0aGUgRGlhbG9nLlxuICAgICAqL1xuICAgIHdpZHRoOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG5cbiAgICAvKipcbiAgICAgKiBQcm9wcyB0aGF0IGFyZSBwYXNzZWQgdG8gdGhlIGRpYWxvZyBjb250YWluZXIuXG4gICAgICovXG4gICAgY29udGFpbmVyUHJvcHM6IFByb3BUeXBlcy5vYmplY3RcbiAgfVxuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgd2lkdGg6IDM5MixcbiAgICBpbnRlbnQ6ICdub25lJyxcbiAgICBoYXNGb290ZXI6IHRydWUsXG4gICAgY29uZmlybUxhYmVsOiAnTGVhcm4gTW9yZScsXG4gICAgaGFzQ2FuY2VsOiB0cnVlLFxuICAgIGNhbmNlbExhYmVsOiAnQ2xvc2UnLFxuICAgIG9uQ2FuY2VsOiBjbG9zZSA9PiBjbG9zZSgpLFxuICAgIG9uQ29uZmlybTogY2xvc2UgPT4gY2xvc2UoKVxuICB9XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcylcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBleGl0aW5nOiBmYWxzZSxcbiAgICAgIGV4aXRlZDogIXByb3BzLmlzU2hvd25cbiAgICB9XG4gIH1cblxuICBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgaWYgKCFwcmV2UHJvcHMuaXNTaG93biAmJiB0aGlzLnByb3BzLmlzU2hvd24pIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9uby1kaWQtdXBkYXRlLXNldC1zdGF0ZVxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGV4aXRlZDogZmFsc2VcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgaGFuZGxlRXhpdGVkID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBleGl0aW5nOiBmYWxzZSwgZXhpdGVkOiB0cnVlIH0pXG4gICAgdGhpcy5wcm9wcy5vbkNsb3NlQ29tcGxldGUoKVxuICB9XG5cbiAgaGFuZGxlQ2FuY2VsID0gKCkgPT4ge1xuICAgIHRoaXMucHJvcHMub25DYW5jZWwodGhpcy5oYW5kbGVDbG9zZSlcbiAgfVxuXG4gIGhhbmRsZUNsb3NlID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBleGl0aW5nOiB0cnVlIH0pXG4gIH1cblxuICBoYW5kbGVDb25maXJtID0gKCkgPT4ge1xuICAgIHRoaXMucHJvcHMub25Db25maXJtKHRoaXMuaGFuZGxlQ2xvc2UpXG4gIH1cblxuICByZW5kZXJDaGlsZHJlbiA9ICgpID0+IHtcbiAgICBjb25zdCB7IGNoaWxkcmVuIH0gPSB0aGlzLnByb3BzXG4gICAgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGNoaWxkcmVuKHsgY2xvc2U6IHRoaXMuaGFuZGxlQ2xvc2UgfSlcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxQYXJhZ3JhcGggc2l6ZT17NDAwfSBjb2xvcj1cIm11dGVkXCI+XG4gICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L1BhcmFncmFwaD5cbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGNoaWxkcmVuXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgdGl0bGUsXG4gICAgICB3aWR0aCxcbiAgICAgIGludGVudCxcbiAgICAgIGlzU2hvd24sXG4gICAgICBoYXNGb290ZXIsXG4gICAgICBoYXNDYW5jZWwsXG4gICAgICBjYW5jZWxMYWJlbCxcbiAgICAgIGNvbmZpcm1MYWJlbCxcbiAgICAgIG9uT3BlbkNvbXBsZXRlLFxuICAgICAgY29udGFpbmVyUHJvcHNcbiAgICB9ID0gdGhpcy5wcm9wc1xuXG4gICAgY29uc3QgeyBleGl0aW5nLCBleGl0ZWQgfSA9IHRoaXMuc3RhdGVcblxuICAgIGlmIChleGl0ZWQpIHJldHVybiBudWxsXG5cbiAgICByZXR1cm4gKFxuICAgICAgPFBvcnRhbD5cbiAgICAgICAgPFRyYW5zaXRpb25cbiAgICAgICAgICBhcHBlYXJcbiAgICAgICAgICB1bm1vdW50T25FeGl0XG4gICAgICAgICAgdGltZW91dD17QU5JTUFUSU9OX0RVUkFUSU9OfVxuICAgICAgICAgIGluPXtpc1Nob3duICYmICFleGl0aW5nfVxuICAgICAgICAgIG9uRXhpdGVkPXt0aGlzLmhhbmRsZUV4aXRlZH1cbiAgICAgICAgICBvbkVudGVyZWQ9e29uT3BlbkNvbXBsZXRlfVxuICAgICAgICA+XG4gICAgICAgICAge3N0YXRlID0+IChcbiAgICAgICAgICAgIDxDYXJkXG4gICAgICAgICAgICAgIHJvbGU9XCJkaWFsb2dcIlxuICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I9XCJ3aGl0ZVwiXG4gICAgICAgICAgICAgIGVsZXZhdGlvbj17NH1cbiAgICAgICAgICAgICAgd2lkdGg9e3dpZHRofVxuICAgICAgICAgICAgICBjc3M9e2FuaW1hdGlvblN0eWxlc31cbiAgICAgICAgICAgICAgZGF0YS1zdGF0ZT17c3RhdGV9XG4gICAgICAgICAgICAgIHBvc2l0aW9uPVwiZml4ZWRcIlxuICAgICAgICAgICAgICBib3R0b209ezE2fVxuICAgICAgICAgICAgICByaWdodD17MTZ9XG4gICAgICAgICAgICAgIHBhZGRpbmc9ezMyfVxuICAgICAgICAgICAgICB7Li4uY29udGFpbmVyUHJvcHN9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxQYW5lIGRpc3BsYXk9XCJmbGV4XCIgYWxpZ25JdGVtcz1cImNlbnRlclwiIG1hcmdpbkJvdHRvbT17MTJ9PlxuICAgICAgICAgICAgICAgIDxIZWFkaW5nIGlzPVwiaDRcIiBzaXplPXs2MDB9IGZsZXg9XCIxXCI+XG4gICAgICAgICAgICAgICAgICB7dGl0bGV9XG4gICAgICAgICAgICAgICAgPC9IZWFkaW5nPlxuICAgICAgICAgICAgICAgIDxJY29uQnV0dG9uXG4gICAgICAgICAgICAgICAgICBoZWlnaHQ9ezMyfVxuICAgICAgICAgICAgICAgICAgaWNvbj1cImNyb3NzXCJcbiAgICAgICAgICAgICAgICAgIGFwcGVhcmFuY2U9XCJtaW5pbWFsXCJcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlQ2xvc2V9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9QYW5lPlxuXG4gICAgICAgICAgICAgIDxQYW5lIG92ZXJmbG93WT1cImF1dG9cIiBkYXRhLXN0YXRlPXtzdGF0ZX0+XG4gICAgICAgICAgICAgICAge3RoaXMucmVuZGVyQ2hpbGRyZW4oKX1cbiAgICAgICAgICAgICAgPC9QYW5lPlxuXG4gICAgICAgICAgICAgIHtoYXNGb290ZXIgJiYgKFxuICAgICAgICAgICAgICAgIDxQYW5lXG4gICAgICAgICAgICAgICAgICBtYXJnaW5Ub3A9ezI0fVxuICAgICAgICAgICAgICAgICAgZmxleFNocmluaz17MH1cbiAgICAgICAgICAgICAgICAgIGRpc3BsYXk9XCJmbGV4XCJcbiAgICAgICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb249XCJyb3ctcmV2ZXJzZVwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICBhcHBlYXJhbmNlPVwicHJpbWFyeVwiXG4gICAgICAgICAgICAgICAgICAgIGludGVudD17aW50ZW50fVxuICAgICAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0PXs4fVxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZUNvbmZpcm19XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIHtjb25maXJtTGFiZWx9XG4gICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgIHtoYXNDYW5jZWwgJiYgKFxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e3RoaXMuaGFuZGxlQ2FuY2VsfT57Y2FuY2VsTGFiZWx9PC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIDwvUGFuZT5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvQ2FyZD5cbiAgICAgICAgICApfVxuICAgICAgICA8L1RyYW5zaXRpb24+XG4gICAgICA8L1BvcnRhbD5cbiAgICApXG4gIH1cbn1cbiJdfQ==