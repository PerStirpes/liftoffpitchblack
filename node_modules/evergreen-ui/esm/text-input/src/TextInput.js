import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { Text } from '../../typography';
import { withTheme } from '../../theme';

var TextInput =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(TextInput, _PureComponent);

  function TextInput() {
    _classCallCheck(this, TextInput);

    return _possibleConstructorReturn(this, _getPrototypeOf(TextInput).apply(this, arguments));
  }

  _createClass(TextInput, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          theme = _this$props.theme,
          className = _this$props.className,
          css = _this$props.css,
          width = _this$props.width,
          height = _this$props.height,
          disabled = _this$props.disabled,
          required = _this$props.required,
          isInvalid = _this$props.isInvalid,
          appearance = _this$props.appearance,
          placeholder = _this$props.placeholder,
          spellCheck = _this$props.spellCheck,
          props = _objectWithoutProperties(_this$props, ["theme", "className", "css", "width", "height", "disabled", "required", "isInvalid", "appearance", "placeholder", "spellCheck"]);

      var themedClassName = theme.getTextInputClassName(appearance);
      var textSize = theme.getTextSizeForControlHeight(height);
      var borderRadius = theme.getBorderRadiusForControlHeight(height);
      return React.createElement(Text, _extends({
        is: "input",
        className: cx(themedClassName, className),
        type: "text",
        size: textSize,
        width: width,
        height: height,
        required: required,
        disabled: disabled,
        placeholder: placeholder,
        paddingLeft: Math.round(height / 3.2),
        paddingRight: Math.round(height / 3.2),
        borderRadius: borderRadius,
        spellCheck: spellCheck,
        "aria-invalid": isInvalid
      }, disabled ? {
        color: 'muted'
      } : {}, {
        css: css
      }, props));
    }
  }]);

  return TextInput;
}(PureComponent);

TextInput.displayName = "TextInput";

_defineProperty(TextInput, "propTypes", _objectSpread({}, Text.propTypes, {
  /**
   * Makes the input element required.
   */
  required: PropTypes.bool,

  /**
   * Makes the input element disabled.
   */
  disabled: PropTypes.bool,

  /**
   * Sets visual styling to be invalid.
   */
  isInvalid: PropTypes.bool,

  /**
   * Use the native spell check functionality of the browser.
   */
  spellCheck: PropTypes.bool,

  /**
   * The placeholder text when there is no value present.
   */
  placeholder: PropTypes.string,

  /**
   * The appearance of the TextInput.
   */
  appearance: PropTypes.string,

  /**
   * The width of the TextInput.
   */
  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /**
   * Theme provided by ThemeProvider.
   */
  theme: PropTypes.object.isRequired,

  /**
   * Class name passed to the button.
   * Only use if you know what you are doing.
   */
  className: PropTypes.string
}));

_defineProperty(TextInput, "defaultProps", {
  appearance: 'default',
  height: 32,
  width: 280,
  disabled: false,
  isInvalid: false,
  spellCheck: true
});

export default withTheme(TextInput);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZXh0LWlucHV0L3NyYy9UZXh0SW5wdXQuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJQdXJlQ29tcG9uZW50IiwiUHJvcFR5cGVzIiwiY3giLCJUZXh0Iiwid2l0aFRoZW1lIiwiVGV4dElucHV0IiwicHJvcHMiLCJ0aGVtZSIsImNsYXNzTmFtZSIsImNzcyIsIndpZHRoIiwiaGVpZ2h0IiwiZGlzYWJsZWQiLCJyZXF1aXJlZCIsImlzSW52YWxpZCIsImFwcGVhcmFuY2UiLCJwbGFjZWhvbGRlciIsInNwZWxsQ2hlY2siLCJ0aGVtZWRDbGFzc05hbWUiLCJnZXRUZXh0SW5wdXRDbGFzc05hbWUiLCJ0ZXh0U2l6ZSIsImdldFRleHRTaXplRm9yQ29udHJvbEhlaWdodCIsImJvcmRlclJhZGl1cyIsImdldEJvcmRlclJhZGl1c0ZvckNvbnRyb2xIZWlnaHQiLCJNYXRoIiwicm91bmQiLCJjb2xvciIsInByb3BUeXBlcyIsImJvb2wiLCJzdHJpbmciLCJvbmVPZlR5cGUiLCJudW1iZXIiLCJvYmplY3QiLCJpc1JlcXVpcmVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxPQUFPQSxLQUFQLElBQWdCQyxhQUFoQixRQUFxQyxPQUFyQztBQUNBLE9BQU9DLFNBQVAsTUFBc0IsWUFBdEI7QUFDQSxPQUFPQyxFQUFQLE1BQWUsWUFBZjtBQUNBLFNBQVNDLElBQVQsUUFBcUIsa0JBQXJCO0FBQ0EsU0FBU0MsU0FBVCxRQUEwQixhQUExQjs7SUFFTUMsUzs7Ozs7Ozs7Ozs7Ozs2QkErREs7QUFBQSx3QkFlSCxLQUFLQyxLQWZGO0FBQUEsVUFFTEMsS0FGSyxlQUVMQSxLQUZLO0FBQUEsVUFHTEMsU0FISyxlQUdMQSxTQUhLO0FBQUEsVUFLTEMsR0FMSyxlQUtMQSxHQUxLO0FBQUEsVUFNTEMsS0FOSyxlQU1MQSxLQU5LO0FBQUEsVUFPTEMsTUFQSyxlQU9MQSxNQVBLO0FBQUEsVUFRTEMsUUFSSyxlQVFMQSxRQVJLO0FBQUEsVUFTTEMsUUFUSyxlQVNMQSxRQVRLO0FBQUEsVUFVTEMsU0FWSyxlQVVMQSxTQVZLO0FBQUEsVUFXTEMsVUFYSyxlQVdMQSxVQVhLO0FBQUEsVUFZTEMsV0FaSyxlQVlMQSxXQVpLO0FBQUEsVUFhTEMsVUFiSyxlQWFMQSxVQWJLO0FBQUEsVUFjRlgsS0FkRTs7QUFnQlAsVUFBTVksZUFBZSxHQUFHWCxLQUFLLENBQUNZLHFCQUFOLENBQTRCSixVQUE1QixDQUF4QjtBQUNBLFVBQU1LLFFBQVEsR0FBR2IsS0FBSyxDQUFDYywyQkFBTixDQUFrQ1YsTUFBbEMsQ0FBakI7QUFDQSxVQUFNVyxZQUFZLEdBQUdmLEtBQUssQ0FBQ2dCLCtCQUFOLENBQXNDWixNQUF0QyxDQUFyQjtBQUVBLGFBQ0Usb0JBQUMsSUFBRDtBQUNFLFFBQUEsRUFBRSxFQUFDLE9BREw7QUFFRSxRQUFBLFNBQVMsRUFBRVQsRUFBRSxDQUFDZ0IsZUFBRCxFQUFrQlYsU0FBbEIsQ0FGZjtBQUdFLFFBQUEsSUFBSSxFQUFDLE1BSFA7QUFJRSxRQUFBLElBQUksRUFBRVksUUFKUjtBQUtFLFFBQUEsS0FBSyxFQUFFVixLQUxUO0FBTUUsUUFBQSxNQUFNLEVBQUVDLE1BTlY7QUFPRSxRQUFBLFFBQVEsRUFBRUUsUUFQWjtBQVFFLFFBQUEsUUFBUSxFQUFFRCxRQVJaO0FBU0UsUUFBQSxXQUFXLEVBQUVJLFdBVGY7QUFVRSxRQUFBLFdBQVcsRUFBRVEsSUFBSSxDQUFDQyxLQUFMLENBQVdkLE1BQU0sR0FBRyxHQUFwQixDQVZmO0FBV0UsUUFBQSxZQUFZLEVBQUVhLElBQUksQ0FBQ0MsS0FBTCxDQUFXZCxNQUFNLEdBQUcsR0FBcEIsQ0FYaEI7QUFZRSxRQUFBLFlBQVksRUFBRVcsWUFaaEI7QUFhRSxRQUFBLFVBQVUsRUFBRUwsVUFiZDtBQWNFLHdCQUFjSDtBQWRoQixTQWVPRixRQUFRLEdBQUc7QUFBRWMsUUFBQUEsS0FBSyxFQUFFO0FBQVQsT0FBSCxHQUF3QixFQWZ2QztBQWdCRSxRQUFBLEdBQUcsRUFBRWpCO0FBaEJQLFNBaUJNSCxLQWpCTixFQURGO0FBcUJEOzs7O0VBeEdxQk4sYTs7QUFBbEJLLFM7O2dCQUFBQSxTLGlDQUtDRixJQUFJLENBQUN3QixTO0FBRVI7OztBQUdBZCxFQUFBQSxRQUFRLEVBQUVaLFNBQVMsQ0FBQzJCLEk7O0FBRXBCOzs7QUFHQWhCLEVBQUFBLFFBQVEsRUFBRVgsU0FBUyxDQUFDMkIsSTs7QUFFcEI7OztBQUdBZCxFQUFBQSxTQUFTLEVBQUViLFNBQVMsQ0FBQzJCLEk7O0FBRXJCOzs7QUFHQVgsRUFBQUEsVUFBVSxFQUFFaEIsU0FBUyxDQUFDMkIsSTs7QUFFdEI7OztBQUdBWixFQUFBQSxXQUFXLEVBQUVmLFNBQVMsQ0FBQzRCLE07O0FBRXZCOzs7QUFHQWQsRUFBQUEsVUFBVSxFQUFFZCxTQUFTLENBQUM0QixNOztBQUV0Qjs7O0FBR0FuQixFQUFBQSxLQUFLLEVBQUVULFNBQVMsQ0FBQzZCLFNBQVYsQ0FBb0IsQ0FBQzdCLFNBQVMsQ0FBQzRCLE1BQVgsRUFBbUI1QixTQUFTLENBQUM4QixNQUE3QixDQUFwQixDOztBQUVQOzs7QUFHQXhCLEVBQUFBLEtBQUssRUFBRU4sU0FBUyxDQUFDK0IsTUFBVixDQUFpQkMsVTs7QUFFeEI7Ozs7QUFJQXpCLEVBQUFBLFNBQVMsRUFBRVAsU0FBUyxDQUFDNEI7OztnQkFuRG5CeEIsUyxrQkFzRGtCO0FBQ3BCVSxFQUFBQSxVQUFVLEVBQUUsU0FEUTtBQUVwQkosRUFBQUEsTUFBTSxFQUFFLEVBRlk7QUFHcEJELEVBQUFBLEtBQUssRUFBRSxHQUhhO0FBSXBCRSxFQUFBQSxRQUFRLEVBQUUsS0FKVTtBQUtwQkUsRUFBQUEsU0FBUyxFQUFFLEtBTFM7QUFNcEJHLEVBQUFBLFVBQVUsRUFBRTtBQU5RLEM7O0FBcUR4QixlQUFlYixTQUFTLENBQUNDLFNBQUQsQ0FBeEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnXG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi4vLi4vdHlwb2dyYXBoeSdcbmltcG9ydCB7IHdpdGhUaGVtZSB9IGZyb20gJy4uLy4uL3RoZW1lJ1xuXG5jbGFzcyBUZXh0SW5wdXQgZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAvKipcbiAgICAgKiBDb21wb3NlcyB0aGUgVGV4dCBjb21wb25lbnQgYXMgdGhlIGJhc2UuXG4gICAgICovXG4gICAgLi4uVGV4dC5wcm9wVHlwZXMsXG5cbiAgICAvKipcbiAgICAgKiBNYWtlcyB0aGUgaW5wdXQgZWxlbWVudCByZXF1aXJlZC5cbiAgICAgKi9cbiAgICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgICAvKipcbiAgICAgKiBNYWtlcyB0aGUgaW5wdXQgZWxlbWVudCBkaXNhYmxlZC5cbiAgICAgKi9cbiAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHZpc3VhbCBzdHlsaW5nIHRvIGJlIGludmFsaWQuXG4gICAgICovXG4gICAgaXNJbnZhbGlkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgIC8qKlxuICAgICAqIFVzZSB0aGUgbmF0aXZlIHNwZWxsIGNoZWNrIGZ1bmN0aW9uYWxpdHkgb2YgdGhlIGJyb3dzZXIuXG4gICAgICovXG4gICAgc3BlbGxDaGVjazogUHJvcFR5cGVzLmJvb2wsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgcGxhY2Vob2xkZXIgdGV4dCB3aGVuIHRoZXJlIGlzIG5vIHZhbHVlIHByZXNlbnQuXG4gICAgICovXG4gICAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgYXBwZWFyYW5jZSBvZiB0aGUgVGV4dElucHV0LlxuICAgICAqL1xuICAgIGFwcGVhcmFuY2U6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgd2lkdGggb2YgdGhlIFRleHRJbnB1dC5cbiAgICAgKi9cbiAgICB3aWR0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxuXG4gICAgLyoqXG4gICAgICogVGhlbWUgcHJvdmlkZWQgYnkgVGhlbWVQcm92aWRlci5cbiAgICAgKi9cbiAgICB0aGVtZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gICAgLyoqXG4gICAgICogQ2xhc3MgbmFtZSBwYXNzZWQgdG8gdGhlIGJ1dHRvbi5cbiAgICAgKiBPbmx5IHVzZSBpZiB5b3Uga25vdyB3aGF0IHlvdSBhcmUgZG9pbmcuXG4gICAgICovXG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nXG4gIH1cblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGFwcGVhcmFuY2U6ICdkZWZhdWx0JyxcbiAgICBoZWlnaHQ6IDMyLFxuICAgIHdpZHRoOiAyODAsXG4gICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgIGlzSW52YWxpZDogZmFsc2UsXG4gICAgc3BlbGxDaGVjazogdHJ1ZVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHRoZW1lLFxuICAgICAgY2xhc3NOYW1lLFxuXG4gICAgICBjc3MsXG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodCxcbiAgICAgIGRpc2FibGVkLFxuICAgICAgcmVxdWlyZWQsXG4gICAgICBpc0ludmFsaWQsXG4gICAgICBhcHBlYXJhbmNlLFxuICAgICAgcGxhY2Vob2xkZXIsXG4gICAgICBzcGVsbENoZWNrLFxuICAgICAgLi4ucHJvcHNcbiAgICB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IHRoZW1lZENsYXNzTmFtZSA9IHRoZW1lLmdldFRleHRJbnB1dENsYXNzTmFtZShhcHBlYXJhbmNlKVxuICAgIGNvbnN0IHRleHRTaXplID0gdGhlbWUuZ2V0VGV4dFNpemVGb3JDb250cm9sSGVpZ2h0KGhlaWdodClcbiAgICBjb25zdCBib3JkZXJSYWRpdXMgPSB0aGVtZS5nZXRCb3JkZXJSYWRpdXNGb3JDb250cm9sSGVpZ2h0KGhlaWdodClcblxuICAgIHJldHVybiAoXG4gICAgICA8VGV4dFxuICAgICAgICBpcz1cImlucHV0XCJcbiAgICAgICAgY2xhc3NOYW1lPXtjeCh0aGVtZWRDbGFzc05hbWUsIGNsYXNzTmFtZSl9XG4gICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgc2l6ZT17dGV4dFNpemV9XG4gICAgICAgIHdpZHRoPXt3aWR0aH1cbiAgICAgICAgaGVpZ2h0PXtoZWlnaHR9XG4gICAgICAgIHJlcXVpcmVkPXtyZXF1aXJlZH1cbiAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICBwbGFjZWhvbGRlcj17cGxhY2Vob2xkZXJ9XG4gICAgICAgIHBhZGRpbmdMZWZ0PXtNYXRoLnJvdW5kKGhlaWdodCAvIDMuMil9XG4gICAgICAgIHBhZGRpbmdSaWdodD17TWF0aC5yb3VuZChoZWlnaHQgLyAzLjIpfVxuICAgICAgICBib3JkZXJSYWRpdXM9e2JvcmRlclJhZGl1c31cbiAgICAgICAgc3BlbGxDaGVjaz17c3BlbGxDaGVja31cbiAgICAgICAgYXJpYS1pbnZhbGlkPXtpc0ludmFsaWR9XG4gICAgICAgIHsuLi4oZGlzYWJsZWQgPyB7IGNvbG9yOiAnbXV0ZWQnIH0gOiB7fSl9XG4gICAgICAgIGNzcz17Y3NzfVxuICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAvPlxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoVGV4dElucHV0KVxuIl19