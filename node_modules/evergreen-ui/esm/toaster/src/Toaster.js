import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import React from 'react';
import ReactDOM from 'react-dom';
import ToastManager from './ToastManager';
var isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';
/**
 * The Toaster manages the interactionsb between
 * the ToasterManger and the toast API.
 */

var Toaster = function Toaster() {
  var _this = this;

  _classCallCheck(this, Toaster);

  _defineProperty(this, "_bindNotify", function (handler) {
    _this.notifyHandler = handler;
  });

  _defineProperty(this, "_bindGetToasts", function (handler) {
    _this.getToastsHandler = handler;
  });

  _defineProperty(this, "_bindCloseAll", function (handler) {
    _this.closeAllHandler = handler;
  });

  _defineProperty(this, "getToasts", function () {
    return _this.getToastsHandler();
  });

  _defineProperty(this, "closeAll", function () {
    return _this.closeAllHandler();
  });

  _defineProperty(this, "notify", function (title) {
    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return _this.notifyHandler(title, _objectSpread({}, settings, {
      intent: 'none'
    }));
  });

  _defineProperty(this, "success", function (title) {
    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return _this.notifyHandler(title, _objectSpread({}, settings, {
      intent: 'success'
    }));
  });

  _defineProperty(this, "warning", function (title) {
    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return _this.notifyHandler(title, _objectSpread({}, settings, {
      intent: 'warning'
    }));
  });

  _defineProperty(this, "danger", function (title) {
    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return _this.notifyHandler(title, _objectSpread({}, settings, {
      intent: 'danger'
    }));
  });

  if (!isBrowser) return;
  var container = document.createElement('div');
  container.setAttribute('data-evergreen-toaster-container', '');
  document.body.appendChild(container);
  ReactDOM.render(React.createElement(ToastManager, {
    bindNotify: this._bindNotify,
    bindGetToasts: this._bindGetToasts,
    bindCloseAll: this._bindCloseAll
  }), container);
};

export { Toaster as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90b2FzdGVyL3NyYy9Ub2FzdGVyLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwiUmVhY3RET00iLCJUb2FzdE1hbmFnZXIiLCJpc0Jyb3dzZXIiLCJ3aW5kb3ciLCJkb2N1bWVudCIsIlRvYXN0ZXIiLCJoYW5kbGVyIiwibm90aWZ5SGFuZGxlciIsImdldFRvYXN0c0hhbmRsZXIiLCJjbG9zZUFsbEhhbmRsZXIiLCJ0aXRsZSIsInNldHRpbmdzIiwiaW50ZW50IiwiY29udGFpbmVyIiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImJvZHkiLCJhcHBlbmRDaGlsZCIsInJlbmRlciIsIl9iaW5kTm90aWZ5IiwiX2JpbmRHZXRUb2FzdHMiLCJfYmluZENsb3NlQWxsIl0sIm1hcHBpbmdzIjoiOzs7QUFBQSxPQUFPQSxLQUFQLE1BQWtCLE9BQWxCO0FBQ0EsT0FBT0MsUUFBUCxNQUFxQixXQUFyQjtBQUNBLE9BQU9DLFlBQVAsTUFBeUIsZ0JBQXpCO0FBRUEsSUFBTUMsU0FBUyxHQUNiLE9BQU9DLE1BQVAsS0FBa0IsV0FBbEIsSUFBaUMsT0FBT0EsTUFBTSxDQUFDQyxRQUFkLEtBQTJCLFdBRDlEO0FBR0E7Ozs7O0lBSXFCQyxPLEdBQ25CLG1CQUFjO0FBQUE7O0FBQUE7O0FBQUEsdUNBaUJBLFVBQUFDLE9BQU8sRUFBSTtBQUN2QixJQUFBLEtBQUksQ0FBQ0MsYUFBTCxHQUFxQkQsT0FBckI7QUFDRCxHQW5CYTs7QUFBQSwwQ0FxQkcsVUFBQUEsT0FBTyxFQUFJO0FBQzFCLElBQUEsS0FBSSxDQUFDRSxnQkFBTCxHQUF3QkYsT0FBeEI7QUFDRCxHQXZCYTs7QUFBQSx5Q0F5QkUsVUFBQUEsT0FBTyxFQUFJO0FBQ3pCLElBQUEsS0FBSSxDQUFDRyxlQUFMLEdBQXVCSCxPQUF2QjtBQUNELEdBM0JhOztBQUFBLHFDQTZCRixZQUFNO0FBQ2hCLFdBQU8sS0FBSSxDQUFDRSxnQkFBTCxFQUFQO0FBQ0QsR0EvQmE7O0FBQUEsb0NBaUNILFlBQU07QUFDZixXQUFPLEtBQUksQ0FBQ0MsZUFBTCxFQUFQO0FBQ0QsR0FuQ2E7O0FBQUEsa0NBcUNMLFVBQUNDLEtBQUQsRUFBMEI7QUFBQSxRQUFsQkMsUUFBa0IsdUVBQVAsRUFBTztBQUNqQyxXQUFPLEtBQUksQ0FBQ0osYUFBTCxDQUFtQkcsS0FBbkIsb0JBQStCQyxRQUEvQjtBQUF5Q0MsTUFBQUEsTUFBTSxFQUFFO0FBQWpELE9BQVA7QUFDRCxHQXZDYTs7QUFBQSxtQ0F5Q0osVUFBQ0YsS0FBRCxFQUEwQjtBQUFBLFFBQWxCQyxRQUFrQix1RUFBUCxFQUFPO0FBQ2xDLFdBQU8sS0FBSSxDQUFDSixhQUFMLENBQW1CRyxLQUFuQixvQkFBK0JDLFFBQS9CO0FBQXlDQyxNQUFBQSxNQUFNLEVBQUU7QUFBakQsT0FBUDtBQUNELEdBM0NhOztBQUFBLG1DQTZDSixVQUFDRixLQUFELEVBQTBCO0FBQUEsUUFBbEJDLFFBQWtCLHVFQUFQLEVBQU87QUFDbEMsV0FBTyxLQUFJLENBQUNKLGFBQUwsQ0FBbUJHLEtBQW5CLG9CQUErQkMsUUFBL0I7QUFBeUNDLE1BQUFBLE1BQU0sRUFBRTtBQUFqRCxPQUFQO0FBQ0QsR0EvQ2E7O0FBQUEsa0NBaURMLFVBQUNGLEtBQUQsRUFBMEI7QUFBQSxRQUFsQkMsUUFBa0IsdUVBQVAsRUFBTztBQUNqQyxXQUFPLEtBQUksQ0FBQ0osYUFBTCxDQUFtQkcsS0FBbkIsb0JBQStCQyxRQUEvQjtBQUF5Q0MsTUFBQUEsTUFBTSxFQUFFO0FBQWpELE9BQVA7QUFDRCxHQW5EYTs7QUFDWixNQUFJLENBQUNWLFNBQUwsRUFBZ0I7QUFFaEIsTUFBTVcsU0FBUyxHQUFHVCxRQUFRLENBQUNVLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBbEI7QUFDQUQsRUFBQUEsU0FBUyxDQUFDRSxZQUFWLENBQXVCLGtDQUF2QixFQUEyRCxFQUEzRDtBQUNBWCxFQUFBQSxRQUFRLENBQUNZLElBQVQsQ0FBY0MsV0FBZCxDQUEwQkosU0FBMUI7QUFFQWIsRUFBQUEsUUFBUSxDQUFDa0IsTUFBVCxDQUNFLG9CQUFDLFlBQUQ7QUFDRSxJQUFBLFVBQVUsRUFBRSxLQUFLQyxXQURuQjtBQUVFLElBQUEsYUFBYSxFQUFFLEtBQUtDLGNBRnRCO0FBR0UsSUFBQSxZQUFZLEVBQUUsS0FBS0M7QUFIckIsSUFERixFQU1FUixTQU5GO0FBUUQsQzs7U0FoQmtCUixPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSdcbmltcG9ydCBUb2FzdE1hbmFnZXIgZnJvbSAnLi9Ub2FzdE1hbmFnZXInXG5cbmNvbnN0IGlzQnJvd3NlciA9XG4gIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG5cbi8qKlxuICogVGhlIFRvYXN0ZXIgbWFuYWdlcyB0aGUgaW50ZXJhY3Rpb25zYiBiZXR3ZWVuXG4gKiB0aGUgVG9hc3Rlck1hbmdlciBhbmQgdGhlIHRvYXN0IEFQSS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9hc3RlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGlmICghaXNCcm93c2VyKSByZXR1cm5cblxuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnZGF0YS1ldmVyZ3JlZW4tdG9hc3Rlci1jb250YWluZXInLCAnJylcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvbnRhaW5lcilcblxuICAgIFJlYWN0RE9NLnJlbmRlcihcbiAgICAgIDxUb2FzdE1hbmFnZXJcbiAgICAgICAgYmluZE5vdGlmeT17dGhpcy5fYmluZE5vdGlmeX1cbiAgICAgICAgYmluZEdldFRvYXN0cz17dGhpcy5fYmluZEdldFRvYXN0c31cbiAgICAgICAgYmluZENsb3NlQWxsPXt0aGlzLl9iaW5kQ2xvc2VBbGx9XG4gICAgICAvPixcbiAgICAgIGNvbnRhaW5lclxuICAgIClcbiAgfVxuXG4gIF9iaW5kTm90aWZ5ID0gaGFuZGxlciA9PiB7XG4gICAgdGhpcy5ub3RpZnlIYW5kbGVyID0gaGFuZGxlclxuICB9XG5cbiAgX2JpbmRHZXRUb2FzdHMgPSBoYW5kbGVyID0+IHtcbiAgICB0aGlzLmdldFRvYXN0c0hhbmRsZXIgPSBoYW5kbGVyXG4gIH1cblxuICBfYmluZENsb3NlQWxsID0gaGFuZGxlciA9PiB7XG4gICAgdGhpcy5jbG9zZUFsbEhhbmRsZXIgPSBoYW5kbGVyXG4gIH1cblxuICBnZXRUb2FzdHMgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VG9hc3RzSGFuZGxlcigpXG4gIH1cblxuICBjbG9zZUFsbCA9ICgpID0+IHtcbiAgICByZXR1cm4gdGhpcy5jbG9zZUFsbEhhbmRsZXIoKVxuICB9XG5cbiAgbm90aWZ5ID0gKHRpdGxlLCBzZXR0aW5ncyA9IHt9KSA9PiB7XG4gICAgcmV0dXJuIHRoaXMubm90aWZ5SGFuZGxlcih0aXRsZSwgeyAuLi5zZXR0aW5ncywgaW50ZW50OiAnbm9uZScgfSlcbiAgfVxuXG4gIHN1Y2Nlc3MgPSAodGl0bGUsIHNldHRpbmdzID0ge30pID0+IHtcbiAgICByZXR1cm4gdGhpcy5ub3RpZnlIYW5kbGVyKHRpdGxlLCB7IC4uLnNldHRpbmdzLCBpbnRlbnQ6ICdzdWNjZXNzJyB9KVxuICB9XG5cbiAgd2FybmluZyA9ICh0aXRsZSwgc2V0dGluZ3MgPSB7fSkgPT4ge1xuICAgIHJldHVybiB0aGlzLm5vdGlmeUhhbmRsZXIodGl0bGUsIHsgLi4uc2V0dGluZ3MsIGludGVudDogJ3dhcm5pbmcnIH0pXG4gIH1cblxuICBkYW5nZXIgPSAodGl0bGUsIHNldHRpbmdzID0ge30pID0+IHtcbiAgICByZXR1cm4gdGhpcy5ub3RpZnlIYW5kbGVyKHRpdGxlLCB7IC4uLnNldHRpbmdzLCBpbnRlbnQ6ICdkYW5nZXInIH0pXG4gIH1cbn1cbiJdfQ==