import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import { Pane } from '../../layers';
import { Icon } from '../../icon';
import { TableRow, TextTableCell } from '../../table';

var Option =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(Option, _PureComponent);

  function Option() {
    _classCallCheck(this, Option);

    return _possibleConstructorReturn(this, _getPrototypeOf(Option).apply(this, arguments));
  }

  _createClass(Option, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          label = _this$props.label,
          onSelect = _this$props.onSelect,
          onDeselect = _this$props.onDeselect,
          isHighlighted = _this$props.isHighlighted,
          isSelected = _this$props.isSelected,
          isSelectable = _this$props.isSelectable,
          disabled = _this$props.disabled,
          style = _this$props.style,
          height = _this$props.height,
          props = _objectWithoutProperties(_this$props, ["label", "onSelect", "onDeselect", "isHighlighted", "isSelected", "isSelectable", "disabled", "style", "height"]);

      var textProps = {};

      if (disabled) {
        textProps.color = 'muted';
      }

      if (isSelected) {
        textProps.color = 'selected';
      }

      return React.createElement(TableRow, _extends({
        isSelectable: isSelectable && !disabled,
        isHighlighted: isHighlighted,
        onSelect: onSelect,
        onDeselect: onDeselect,
        isSelected: isSelected,
        style: style,
        display: "flex",
        alignItems: "center",
        borderBottom: false
      }, props), React.createElement(Pane, {
        paddingLeft: 12,
        paddingRight: 8,
        opacity: isSelected ? 1 : 0,
        flexGrow: 0,
        paddingTop: 4
      }, React.createElement(Icon, {
        color: "selected",
        icon: "tick",
        size: 14
      })), React.createElement(TextTableCell, {
        height: height,
        borderBottom: "muted",
        textProps: textProps,
        paddingLeft: 0,
        borderRight: null,
        flex: 1,
        alignSelf: "stretch",
        cursor: disabled ? 'default' : 'pointer'
      }, label));
    }
  }]);

  return Option;
}(PureComponent);

Option.displayName = "Option";

_defineProperty(Option, "propTypes", {
  label: PropTypes.string,
  style: PropTypes.any,
  height: PropTypes.number,
  onSelect: PropTypes.func,
  onDeselect: PropTypes.func,
  isHighlighted: PropTypes.bool,
  isSelected: PropTypes.bool,
  isSelectable: PropTypes.bool,
  disabled: PropTypes.bool
});

export { Option as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zZWxlY3QtbWVudS9zcmMvT3B0aW9uLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsIlByb3BUeXBlcyIsIlBhbmUiLCJJY29uIiwiVGFibGVSb3ciLCJUZXh0VGFibGVDZWxsIiwiT3B0aW9uIiwicHJvcHMiLCJsYWJlbCIsIm9uU2VsZWN0Iiwib25EZXNlbGVjdCIsImlzSGlnaGxpZ2h0ZWQiLCJpc1NlbGVjdGVkIiwiaXNTZWxlY3RhYmxlIiwiZGlzYWJsZWQiLCJzdHlsZSIsImhlaWdodCIsInRleHRQcm9wcyIsImNvbG9yIiwic3RyaW5nIiwiYW55IiwibnVtYmVyIiwiZnVuYyIsImJvb2wiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsT0FBT0EsS0FBUCxJQUFnQkMsYUFBaEIsUUFBcUMsT0FBckM7QUFDQSxPQUFPQyxTQUFQLE1BQXNCLFlBQXRCO0FBQ0EsU0FBU0MsSUFBVCxRQUFxQixjQUFyQjtBQUNBLFNBQVNDLElBQVQsUUFBcUIsWUFBckI7QUFDQSxTQUFTQyxRQUFULEVBQW1CQyxhQUFuQixRQUF3QyxhQUF4Qzs7SUFFcUJDLE07Ozs7Ozs7Ozs7Ozs7NkJBYVY7QUFBQSx3QkFZSCxLQUFLQyxLQVpGO0FBQUEsVUFFTEMsS0FGSyxlQUVMQSxLQUZLO0FBQUEsVUFHTEMsUUFISyxlQUdMQSxRQUhLO0FBQUEsVUFJTEMsVUFKSyxlQUlMQSxVQUpLO0FBQUEsVUFLTEMsYUFMSyxlQUtMQSxhQUxLO0FBQUEsVUFNTEMsVUFOSyxlQU1MQSxVQU5LO0FBQUEsVUFPTEMsWUFQSyxlQU9MQSxZQVBLO0FBQUEsVUFRTEMsUUFSSyxlQVFMQSxRQVJLO0FBQUEsVUFTTEMsS0FUSyxlQVNMQSxLQVRLO0FBQUEsVUFVTEMsTUFWSyxlQVVMQSxNQVZLO0FBQUEsVUFXRlQsS0FYRTs7QUFjUCxVQUFNVSxTQUFTLEdBQUcsRUFBbEI7O0FBQ0EsVUFBSUgsUUFBSixFQUFjO0FBQ1pHLFFBQUFBLFNBQVMsQ0FBQ0MsS0FBVixHQUFrQixPQUFsQjtBQUNEOztBQUNELFVBQUlOLFVBQUosRUFBZ0I7QUFDZEssUUFBQUEsU0FBUyxDQUFDQyxLQUFWLEdBQWtCLFVBQWxCO0FBQ0Q7O0FBRUQsYUFDRSxvQkFBQyxRQUFEO0FBQ0UsUUFBQSxZQUFZLEVBQUVMLFlBQVksSUFBSSxDQUFDQyxRQURqQztBQUVFLFFBQUEsYUFBYSxFQUFFSCxhQUZqQjtBQUdFLFFBQUEsUUFBUSxFQUFFRixRQUhaO0FBSUUsUUFBQSxVQUFVLEVBQUVDLFVBSmQ7QUFLRSxRQUFBLFVBQVUsRUFBRUUsVUFMZDtBQU1FLFFBQUEsS0FBSyxFQUFFRyxLQU5UO0FBT0UsUUFBQSxPQUFPLEVBQUMsTUFQVjtBQVFFLFFBQUEsVUFBVSxFQUFDLFFBUmI7QUFTRSxRQUFBLFlBQVksRUFBRTtBQVRoQixTQVVNUixLQVZOLEdBWUUsb0JBQUMsSUFBRDtBQUNFLFFBQUEsV0FBVyxFQUFFLEVBRGY7QUFFRSxRQUFBLFlBQVksRUFBRSxDQUZoQjtBQUdFLFFBQUEsT0FBTyxFQUFFSyxVQUFVLEdBQUcsQ0FBSCxHQUFPLENBSDVCO0FBSUUsUUFBQSxRQUFRLEVBQUUsQ0FKWjtBQUtFLFFBQUEsVUFBVSxFQUFFO0FBTGQsU0FPRSxvQkFBQyxJQUFEO0FBQU0sUUFBQSxLQUFLLEVBQUMsVUFBWjtBQUF1QixRQUFBLElBQUksRUFBQyxNQUE1QjtBQUFtQyxRQUFBLElBQUksRUFBRTtBQUF6QyxRQVBGLENBWkYsRUFxQkUsb0JBQUMsYUFBRDtBQUNFLFFBQUEsTUFBTSxFQUFFSSxNQURWO0FBRUUsUUFBQSxZQUFZLEVBQUMsT0FGZjtBQUdFLFFBQUEsU0FBUyxFQUFFQyxTQUhiO0FBSUUsUUFBQSxXQUFXLEVBQUUsQ0FKZjtBQUtFLFFBQUEsV0FBVyxFQUFFLElBTGY7QUFNRSxRQUFBLElBQUksRUFBRSxDQU5SO0FBT0UsUUFBQSxTQUFTLEVBQUMsU0FQWjtBQVFFLFFBQUEsTUFBTSxFQUFFSCxRQUFRLEdBQUcsU0FBSCxHQUFlO0FBUmpDLFNBVUdOLEtBVkgsQ0FyQkYsQ0FERjtBQW9DRDs7OztFQXZFaUNSLGE7O0FBQWZNLE07O2dCQUFBQSxNLGVBQ0E7QUFDakJFLEVBQUFBLEtBQUssRUFBRVAsU0FBUyxDQUFDa0IsTUFEQTtBQUVqQkosRUFBQUEsS0FBSyxFQUFFZCxTQUFTLENBQUNtQixHQUZBO0FBR2pCSixFQUFBQSxNQUFNLEVBQUVmLFNBQVMsQ0FBQ29CLE1BSEQ7QUFJakJaLEVBQUFBLFFBQVEsRUFBRVIsU0FBUyxDQUFDcUIsSUFKSDtBQUtqQlosRUFBQUEsVUFBVSxFQUFFVCxTQUFTLENBQUNxQixJQUxMO0FBTWpCWCxFQUFBQSxhQUFhLEVBQUVWLFNBQVMsQ0FBQ3NCLElBTlI7QUFPakJYLEVBQUFBLFVBQVUsRUFBRVgsU0FBUyxDQUFDc0IsSUFQTDtBQVFqQlYsRUFBQUEsWUFBWSxFQUFFWixTQUFTLENBQUNzQixJQVJQO0FBU2pCVCxFQUFBQSxRQUFRLEVBQUViLFNBQVMsQ0FBQ3NCO0FBVEgsQzs7U0FEQWpCLE0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IHsgUGFuZSB9IGZyb20gJy4uLy4uL2xheWVycydcbmltcG9ydCB7IEljb24gfSBmcm9tICcuLi8uLi9pY29uJ1xuaW1wb3J0IHsgVGFibGVSb3csIFRleHRUYWJsZUNlbGwgfSBmcm9tICcuLi8uLi90YWJsZSdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT3B0aW9uIGV4dGVuZHMgUHVyZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgbGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgc3R5bGU6IFByb3BUeXBlcy5hbnksXG4gICAgaGVpZ2h0OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvbkRlc2VsZWN0OiBQcm9wVHlwZXMuZnVuYyxcbiAgICBpc0hpZ2hsaWdodGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc1NlbGVjdGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc1NlbGVjdGFibGU6IFByb3BUeXBlcy5ib29sLFxuICAgIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbFxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGxhYmVsLFxuICAgICAgb25TZWxlY3QsXG4gICAgICBvbkRlc2VsZWN0LFxuICAgICAgaXNIaWdobGlnaHRlZCxcbiAgICAgIGlzU2VsZWN0ZWQsXG4gICAgICBpc1NlbGVjdGFibGUsXG4gICAgICBkaXNhYmxlZCxcbiAgICAgIHN0eWxlLFxuICAgICAgaGVpZ2h0LFxuICAgICAgLi4ucHJvcHNcbiAgICB9ID0gdGhpcy5wcm9wc1xuXG4gICAgY29uc3QgdGV4dFByb3BzID0ge31cbiAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgIHRleHRQcm9wcy5jb2xvciA9ICdtdXRlZCdcbiAgICB9XG4gICAgaWYgKGlzU2VsZWN0ZWQpIHtcbiAgICAgIHRleHRQcm9wcy5jb2xvciA9ICdzZWxlY3RlZCdcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFRhYmxlUm93XG4gICAgICAgIGlzU2VsZWN0YWJsZT17aXNTZWxlY3RhYmxlICYmICFkaXNhYmxlZH1cbiAgICAgICAgaXNIaWdobGlnaHRlZD17aXNIaWdobGlnaHRlZH1cbiAgICAgICAgb25TZWxlY3Q9e29uU2VsZWN0fVxuICAgICAgICBvbkRlc2VsZWN0PXtvbkRlc2VsZWN0fVxuICAgICAgICBpc1NlbGVjdGVkPXtpc1NlbGVjdGVkfVxuICAgICAgICBzdHlsZT17c3R5bGV9XG4gICAgICAgIGRpc3BsYXk9XCJmbGV4XCJcbiAgICAgICAgYWxpZ25JdGVtcz1cImNlbnRlclwiXG4gICAgICAgIGJvcmRlckJvdHRvbT17ZmFsc2V9XG4gICAgICAgIHsuLi5wcm9wc31cbiAgICAgID5cbiAgICAgICAgPFBhbmVcbiAgICAgICAgICBwYWRkaW5nTGVmdD17MTJ9XG4gICAgICAgICAgcGFkZGluZ1JpZ2h0PXs4fVxuICAgICAgICAgIG9wYWNpdHk9e2lzU2VsZWN0ZWQgPyAxIDogMH1cbiAgICAgICAgICBmbGV4R3Jvdz17MH1cbiAgICAgICAgICBwYWRkaW5nVG9wPXs0fVxuICAgICAgICA+XG4gICAgICAgICAgPEljb24gY29sb3I9XCJzZWxlY3RlZFwiIGljb249XCJ0aWNrXCIgc2l6ZT17MTR9IC8+XG4gICAgICAgIDwvUGFuZT5cbiAgICAgICAgPFRleHRUYWJsZUNlbGxcbiAgICAgICAgICBoZWlnaHQ9e2hlaWdodH1cbiAgICAgICAgICBib3JkZXJCb3R0b209XCJtdXRlZFwiXG4gICAgICAgICAgdGV4dFByb3BzPXt0ZXh0UHJvcHN9XG4gICAgICAgICAgcGFkZGluZ0xlZnQ9ezB9XG4gICAgICAgICAgYm9yZGVyUmlnaHQ9e251bGx9XG4gICAgICAgICAgZmxleD17MX1cbiAgICAgICAgICBhbGlnblNlbGY9XCJzdHJldGNoXCJcbiAgICAgICAgICBjdXJzb3I9e2Rpc2FibGVkID8gJ2RlZmF1bHQnIDogJ3BvaW50ZXInfVxuICAgICAgICA+XG4gICAgICAgICAge2xhYmVsfVxuICAgICAgICA8L1RleHRUYWJsZUNlbGw+XG4gICAgICA8L1RhYmxlUm93PlxuICAgIClcbiAgfVxufVxuIl19