import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import { IconButton } from '../../buttons';
import { Pane } from '../../layers';
import { Heading } from '../../typography';
import OptionsList from './OptionsList';
import OptionShapePropType from './OptionShapePropType';

var SelectMenuContent =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(SelectMenuContent, _PureComponent);

  function SelectMenuContent() {
    _classCallCheck(this, SelectMenuContent);

    return _possibleConstructorReturn(this, _getPrototypeOf(SelectMenuContent).apply(this, arguments));
  }

  _createClass(SelectMenuContent, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          width = _this$props.width,
          height = _this$props.height,
          options = _this$props.options,
          hasTitle = _this$props.hasTitle,
          hasFilter = _this$props.hasFilter,
          close = _this$props.close,
          title = _this$props.title,
          listProps = _this$props.listProps,
          detailView = _this$props.detailView,
          emptyView = _this$props.emptyView,
          isMultiSelect = _this$props.isMultiSelect;
      var headerHeight = 40;
      var optionsListHeight = hasTitle ? height - headerHeight : height;
      var hasDetailView = Boolean(detailView);
      var hasEmptyView = Boolean(emptyView);
      return React.createElement(Pane, {
        display: "flex",
        height: height
      }, React.createElement(Pane, {
        width: width,
        height: height,
        display: "flex",
        flexDirection: "column",
        borderRight: hasDetailView ? 'muted' : null
      }, hasTitle && React.createElement(Pane, {
        display: "flex",
        alignItems: "center",
        borderBottom: "default",
        padding: 8,
        height: headerHeight,
        boxSizing: "border-box"
      }, React.createElement(Pane, {
        flex: "1"
      }, React.createElement(Heading, {
        size: 400
      }, title)), React.createElement(IconButton, {
        icon: "cross",
        appearance: "minimal",
        height: 24,
        onClick: close
      })), options.length === 0 && hasEmptyView ? React.createElement(Pane, {
        height: optionsListHeight
      }, emptyView) : React.createElement(OptionsList, _extends({
        height: optionsListHeight,
        hasFilter: hasFilter,
        options: options,
        isMultiSelect: isMultiSelect,
        close: close
      }, listProps))), hasDetailView && detailView);
    }
  }]);

  return SelectMenuContent;
}(PureComponent);

SelectMenuContent.displayName = "SelectMenuContent";

_defineProperty(SelectMenuContent, "propTypes", {
  close: PropTypes.func,
  title: PropTypes.string,
  width: PropTypes.number,
  height: PropTypes.number,
  options: PropTypes.arrayOf(OptionShapePropType),
  hasTitle: PropTypes.bool,
  hasFilter: PropTypes.bool,
  listProps: PropTypes.shape(OptionsList.propTypes),

  /**
   * When true, multi select is accounted for.
   */
  isMultiSelect: PropTypes.bool,

  /**
   * Node that is placed right next to the options.
   */
  detailView: PropTypes.node,

  /**
   * Node that is displayed instead of options list when there are no options.
   */
  emptyView: PropTypes.node
});

_defineProperty(SelectMenuContent, "defaultProps", {
  options: [],
  hasTitle: true,
  hasFilter: true
});

export { SelectMenuContent as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zZWxlY3QtbWVudS9zcmMvU2VsZWN0TWVudUNvbnRlbnQuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJQdXJlQ29tcG9uZW50IiwiUHJvcFR5cGVzIiwiSWNvbkJ1dHRvbiIsIlBhbmUiLCJIZWFkaW5nIiwiT3B0aW9uc0xpc3QiLCJPcHRpb25TaGFwZVByb3BUeXBlIiwiU2VsZWN0TWVudUNvbnRlbnQiLCJwcm9wcyIsIndpZHRoIiwiaGVpZ2h0Iiwib3B0aW9ucyIsImhhc1RpdGxlIiwiaGFzRmlsdGVyIiwiY2xvc2UiLCJ0aXRsZSIsImxpc3RQcm9wcyIsImRldGFpbFZpZXciLCJlbXB0eVZpZXciLCJpc011bHRpU2VsZWN0IiwiaGVhZGVySGVpZ2h0Iiwib3B0aW9uc0xpc3RIZWlnaHQiLCJoYXNEZXRhaWxWaWV3IiwiQm9vbGVhbiIsImhhc0VtcHR5VmlldyIsImxlbmd0aCIsImZ1bmMiLCJzdHJpbmciLCJudW1iZXIiLCJhcnJheU9mIiwiYm9vbCIsInNoYXBlIiwicHJvcFR5cGVzIiwibm9kZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLE9BQU9BLEtBQVAsSUFBZ0JDLGFBQWhCLFFBQXFDLE9BQXJDO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixZQUF0QjtBQUNBLFNBQVNDLFVBQVQsUUFBMkIsZUFBM0I7QUFDQSxTQUFTQyxJQUFULFFBQXFCLGNBQXJCO0FBQ0EsU0FBU0MsT0FBVCxRQUF3QixrQkFBeEI7QUFDQSxPQUFPQyxXQUFQLE1BQXdCLGVBQXhCO0FBQ0EsT0FBT0MsbUJBQVAsTUFBZ0MsdUJBQWhDOztJQUVxQkMsaUI7Ozs7Ozs7Ozs7Ozs7NkJBaUNWO0FBQUEsd0JBYUgsS0FBS0MsS0FiRjtBQUFBLFVBRUxDLEtBRkssZUFFTEEsS0FGSztBQUFBLFVBR0xDLE1BSEssZUFHTEEsTUFISztBQUFBLFVBSUxDLE9BSkssZUFJTEEsT0FKSztBQUFBLFVBS0xDLFFBTEssZUFLTEEsUUFMSztBQUFBLFVBTUxDLFNBTkssZUFN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YixFQUFBQSxVQUFVLEVBQUVoQixTQUFTLENBQUNnQyxJQWxCTDs7QUFvQmpCOzs7QUFHQWYsRUFBQUEsU0FBUyxFQUFFakIsU0FBUyxDQUFDZ0M7QUF2QkosQzs7Z0JBREExQixpQixrQkEyQkc7QUFDcEJJLEVBQUFBLE9BQU8sRUFBRSxFQURXO0FBRXBCQyxFQUFBQSxRQUFRLEVBQUUsSUFGVTtBQUdwQkMsRUFBQUEsU0FBUyxFQUFFO0FBSFMsQzs7U0EzQkhOLGlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCB7IEljb25CdXR0b24gfSBmcm9tICcuLi8uLi9idXR0b25zJ1xuaW1wb3J0IHsgUGFuZSB9IGZyb20gJy4uLy4uL2xheWVycydcbmltcG9ydCB7IEhlYWRpbmcgfSBmcm9tICcuLi8uLi90eXBvZ3JhcGh5J1xuaW1wb3J0IE9wdGlvbnNMaXN0IGZyb20gJy4vT3B0aW9uc0xpc3QnXG5pbXBvcnQgT3B0aW9uU2hhcGVQcm9wVHlwZSBmcm9tICcuL09wdGlvblNoYXBlUHJvcFR5cGUnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlbGVjdE1lbnVDb250ZW50IGV4dGVuZHMgUHVyZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgY2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuICAgIHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHdpZHRoOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGhlaWdodDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBvcHRpb25zOiBQcm9wVHlwZXMuYXJyYXlPZihPcHRpb25TaGFwZVByb3BUeXBlKSxcbiAgICBoYXNUaXRsZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgaGFzRmlsdGVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBsaXN0UHJvcHM6IFByb3BUeXBlcy5zaGFwZShPcHRpb25zTGlzdC5wcm9wVHlwZXMpLFxuXG4gICAgLyoqXG4gICAgICogV2hlbiB0cnVlLCBtdWx0aSBzZWxlY3QgaXMgYWNjb3VudGVkIGZvci5cbiAgICAgKi9cbiAgICBpc011bHRpU2VsZWN0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAgIC8qKlxuICAgICAqIE5vZGUgdGhhdCBpcyBwbGFjZWQgcmlnaHQgbmV4dCB0byB0aGUgb3B0aW9ucy5cbiAgICAgKi9cbiAgICBkZXRhaWxWaWV3OiBQcm9wVHlwZXMubm9kZSxcblxuICAgIC8qKlxuICAgICAqIE5vZGUgdGhhdCBpcyBkaXNwbGF5ZWQgaW5zdGVhZCBvZiBvcHRpb25zIGxpc3Qgd2hlbiB0aGVyZSBhcmUgbm8gb3B0aW9ucy5cbiAgICAgKi9cbiAgICBlbXB0eVZpZXc6IFByb3BUeXBlcy5ub2RlXG4gIH1cblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIG9wdGlvbnM6IFtdLFxuICAgIGhhc1RpdGxlOiB0cnVlLFxuICAgIGhhc0ZpbHRlcjogdHJ1ZVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0LFxuICAgICAgb3B0aW9ucyxcbiAgICAgIGhhc1RpdGxlLFxuICAgICAgaGFzRmlsdGVyLFxuICAgICAgY2xvc2UsXG4gICAgICB0aXRsZSxcbiAgICAgIGxpc3RQcm9wcyxcbiAgICAgIGRldGFpbFZpZXcsXG4gICAgICBlbXB0eVZpZXcsXG4gICAgICBpc011bHRpU2VsZWN0XG4gICAgfSA9IHRoaXMucHJvcHNcblxuICAgIGNvbnN0IGhlYWRlckhlaWdodCA9IDQwXG4gICAgY29uc3Qgb3B0aW9uc0xpc3RIZWlnaHQgPSBoYXNUaXRsZSA/IGhlaWdodCAtIGhlYWRlckhlaWdodCA6IGhlaWdodFxuICAgIGNvbnN0IGhhc0RldGFpbFZpZXcgPSBCb29sZWFuKGRldGFpbFZpZXcpXG4gICAgY29uc3QgaGFzRW1wdHlWaWV3ID0gQm9vbGVhbihlbXB0eVZpZXcpXG5cbiAgICByZXR1cm4gKFxuICAgICAgPFBhbmUgZGlzcGxheT1cImZsZXhcIiBoZWlnaHQ9e2hlaWdodH0+XG4gICAgICAgIDxQYW5lXG4gICAgICAgICAgd2lkdGg9e3dpZHRofVxuICAgICAgICAgIGhlaWdodD17aGVpZ2h0fVxuICAgICAgICAgIGRpc3BsYXk9XCJmbGV4XCJcbiAgICAgICAgICBmbGV4RGlyZWN0aW9uPVwiY29sdW1uXCJcbiAgICAgICAgICBib3JkZXJSaWdodD17aGFzRGV0YWlsVmlldyA/ICdtdXRlZCcgOiBudWxsfVxuICAgICAgICA+XG4gICAgICAgICAge2hhc1RpdGxlICYmIChcbiAgICAgICAgICAgIDxQYW5lXG4gICAgICAgICAgICAgIGRpc3BsYXk9XCJmbGV4XCJcbiAgICAgICAgICAgICAgYWxpZ25JdGVtcz1cImNlbnRlclwiXG4gICAgICAgICAgICAgIGJvcmRlckJvdHRvbT1cImRlZmF1bHRcIlxuICAgICAgICAgICAgICBwYWRkaW5nPXs4fVxuICAgICAgICAgICAgICBoZWlnaHQ9e2hlYWRlckhlaWdodH1cbiAgICAgICAgICAgICAgYm94U2l6aW5nPVwiYm9yZGVyLWJveFwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxQYW5lIGZsZXg9XCIxXCI+XG4gICAgICAgICAgICAgICAgPEhlYWRpbmcgc2l6ZT17NDAwfT57dGl0bGV9PC9IZWFkaW5nPlxuICAgICAgICAgICAgICA8L1BhbmU+XG4gICAgICAgICAgICAgIDxJY29uQnV0dG9uXG4gICAgICAgICAgICAgICAgaWNvbj1cImNyb3NzXCJcbiAgICAgICAgICAgICAgICBhcHBlYXJhbmNlPVwibWluaW1hbFwiXG4gICAgICAgICAgICAgICAgaGVpZ2h0PXsyNH1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtjbG9zZX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvUGFuZT5cbiAgICAgICAgICApfVxuXG4gICAgICAgICAge29wdGlvbnMubGVuZ3RoID09PSAwICYmIGhhc0VtcHR5VmlldyA/IChcbiAgICAgICAgICAgIDxQYW5lIGhlaWdodD17b3B0aW9uc0xpc3RIZWlnaHR9PntlbXB0eVZpZXd9PC9QYW5lPlxuICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICA8T3B0aW9uc0xpc3RcbiAgICAgICAgICAgICAgaGVpZ2h0PXtvcHRpb25zTGlzdEhlaWdodH1cbiAgICAgICAgICAgICAgaGFzRmlsdGVyPXtoYXNGaWx0ZXJ9XG4gICAgICAgICAgICAgIG9wdGlvbnM9e29wdGlvbnN9XG4gICAgICAgICAgICAgIGlzTXVsdGlTZWxlY3Q9e2lzTXVsdGlTZWxlY3R9XG4gICAgICAgICAgICAgIGNsb3NlPXtjbG9zZX1cbiAgICAgICAgICAgICAgey4uLmxpc3RQcm9wc31cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9QYW5lPlxuICAgICAgICB7aGFzRGV0YWlsVmlldyAmJiBkZXRhaWxWaWV3fVxuICAgICAgPC9QYW5lPlxuICAgIClcbiAgfVxufVxuIl19