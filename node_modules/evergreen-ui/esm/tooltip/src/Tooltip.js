import _extends from "@babel/runtime/helpers/esm/extends";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import debounce from 'lodash.debounce';
import { Positioner } from '../../positioner';
import { Position } from '../../constants';
import TooltipStateless from './TooltipStateless';
var idCounter = 0;

var Tooltip =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(Tooltip, _PureComponent);

  function Tooltip(props, context) {
    var _this;

    _classCallCheck(this, Tooltip);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Tooltip).call(this, props, context));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "show", function () {
      if (_this.state.isShown) return;

      _this.setState({
        isShown: true
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "hide", function () {
      if (!_this.state.isShown) return;

      _this.setState({
        isShown: false
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "renderTarget", function (_ref) {
      var getRef = _ref.getRef;
      var children = _this.props.children;
      var tooltipTargetProps = {
        onMouseEnter: _this.show,
        onMouseLeave: _this.hide,
        'aria-describedby': _this.state.id
        /**
         * Tooltips can be used within a Popover (not the other way around)
         * When a Tooltip is used within a Popover, the Popover passes
         * its props to the Tooltip in a `popoverProps` object.
         */
        // eslint-disable-next-line react/prop-types

      };

      if (_this.props.popoverProps) {
        var _this$props$popoverPr = _this.props.popoverProps,
            getTargetRef = _this$props$popoverPr.getTargetRef,
            isShown = _this$props$popoverPr.isShown,
            popoverTargetProps = _objectWithoutProperties(_this$props$popoverPr, ["getTargetRef", "isShown"]);

        return React.cloneElement(children, _objectSpread({}, popoverTargetProps, tooltipTargetProps, {
          innerRef: function innerRef(ref) {
            // Get the ref for the Tooltip.
            getRef(ref); // Pass the ref to the Popover.

            getTargetRef(ref);
          }
        }));
      }
      /**
       * With normal usage only the props for a Tooltip are passed to the target.
       */


      return React.cloneElement(children, _objectSpread({}, tooltipTargetProps, {
        innerRef: function innerRef(ref) {
          getRef(ref);
        }
      }));
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "isPopoverShown", function () {
      return _this.props.popoverProps && _this.props.popoverProps.isShown;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleMouseEnterTarget", function () {
      _this.setState({
        isShownByTarget: true
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleMouseLeaveTarget", function () {
      _this.setState({
        isShownByTarget: false
      });
    });

    _this.state = {
      id: "evergreen-tooltip-".concat(++idCounter),
      isShown: props.isShown,
      isShownByTarget: false
    };
    _this.handleMouseLeaveTarget = debounce(_this.handleMouseLeaveTarget, _this.props.hideDelay);
    _this.hide = debounce(_this.hide, _this.props.hideDelay);
    return _this;
  }

  _createClass(Tooltip, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          appearance = _this$props.appearance,
          isShown = _this$props.isShown,
          content = _this$props.content,
          position = _this$props.position,
          statelessProps = _this$props.statelessProps;
      var _this$state = this.state,
          stateIsShown = _this$state.isShown,
          isShownByTarget = _this$state.isShownByTarget;
      var shown = (isShown || stateIsShown || isShownByTarget) && !this.isPopoverShown(); // Tooltip was explicitly set to not be shown

      if (isShown === false) {
        shown = false;
      }

      return React.createElement(Positioner, {
        target: function target(_ref2) {
          var getRef = _ref2.getRef;
          return _this2.renderTarget({
            getRef: getRef
          });
        },
        isShown: shown,
        position: position,
        animationDuration: 160
      }, function (_ref3) {
        var css = _ref3.css,
            style = _ref3.style,
            state = _ref3.state,
            getRef = _ref3.getRef;
        return React.createElement(TooltipStateless, _extends({
          id: _this2.state.id,
          appearance: appearance,
          innerRef: function innerRef(ref) {
            return getRef(ref);
          },
          "data-state": state,
          css: css,
          style: style,
          onMouseEnter: _this2.handleMouseEnterTarget,
          onMouseLeave: _this2.handleMouseLeaveTarget
        }, statelessProps), content);
      });
    }
  }]);

  return Tooltip;
}(PureComponent);

Tooltip.displayName = "Tooltip";

_defineProperty(Tooltip, "propTypes", {
  /**
   * The appearance of the tooltip.
   */
  appearance: PropTypes.oneOf(['default', 'card']).isRequired,

  /**
   * The position the Popover is on.
   */
  position: PropTypes.oneOf([Position.TOP, Position.TOP_LEFT, Position.TOP_RIGHT, Position.BOTTOM, Position.BOTTOM_LEFT, Position.BOTTOM_RIGHT, Position.LEFT, Position.RIGHT]),

  /**
   * The content of the Popover.
   */
  content: PropTypes.node.isRequired,

  /**
   * Time in ms before hiding the Tooltip.
   */
  hideDelay: PropTypes.number.isRequired,

  /**
   * When True, manually show the Tooltip.
   */
  isShown: PropTypes.bool,

  /**
   * The target button of the Tooltip.
   */
  children: PropTypes.node.isRequired,

  /**
   * Properties passed through to the Tooltip.
   */
  statelessProps: PropTypes.object
});

_defineProperty(Tooltip, "defaultProps", {
  appearance: 'default',
  position: Position.BOTTOM,
  hideDelay: 120
});

export { Tooltip as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90b29sdGlwL3NyYy9Ub29sdGlwLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsIlByb3BUeXBlcyIsImRlYm91bmNlIiwiUG9zaXRpb25lciIsIlBvc2l0aW9uIiwiVG9vbHRpcFN0YXRlbGVzcyIsImlkQ291bnRlciIsIlRvb2x0aXAiLCJwcm9wcyIsImNvbnRleHQiLCJzdGF0ZSIsImlzU2hvd24iLCJzZXRTdGF0ZSIsImdldFJlZiIsImNoaWxkcmVuIiwidG9vbHRpcFRhcmdldFByb3BzIiwib25Nb3VzZUVudGVyIiwic2hvdyIsIm9uTW91c2VMZWF2ZSIsImhpZGUiLCJpZCIsInBvcG92ZXJQcm9wcyIsImdldFRhcmdldFJlZiIsInBvcG92ZXJUYXJnZXRQcm9wcyIsImNsb25lRWxlbWVudCIsImlubmVyUmVmIiwicmVmIiwiaXNTaG93bkJ5VGFyZ2V0IiwiaGFuZGxlTW91c2VMZWF2ZVRhcmdldCIsImhpZGVEZWxheSIsImFwcGVhcmFuY2UiLCJjb250ZW50IiwicG9zaXRpb24iLCJzdGF0ZWxlc3NQcm9wcyIsInN0YXRlSXNTaG93biIsInNob3duIiwiaXNQb3BvdmVyU2hvd24iLCJyZW5kZXJUYXJnZXQiLCJjc3MiLCJzdHlsZSIsImhhbmRsZU1vdXNlRW50ZXJUYXJnZXQiLCJvbmVPZiIsImlzUmVxdWlyZWQiLCJUT1AiLCJUT1BfTEVGVCIsIlRPUF9SSUdIVCIsIkJPVFRPTSIsIkJPVFRPTV9MRUZUIiwiQk9UVE9NX1JJR0hUIiwiTEVGVCIsIlJJR0hUIiwibm9kZSIsIm51bWJlciIsImJvb2wiLCJvYmplY3QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxPQUFPQSxLQUFQLElBQWdCQyxhQUFoQixRQUFxQyxPQUFyQztBQUNBLE9BQU9DLFNBQVAsTUFBc0IsWUFBdEI7QUFDQSxPQUFPQyxRQUFQLE1BQXFCLGlCQUFyQjtBQUNBLFNBQVNDLFVBQVQsUUFBMkIsa0JBQTNCO0FBQ0EsU0FBU0Ms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QWMsRUFBRWhDLFNBQVMsQ0FBQ3FEO0FBM0NULEM7O2dCQURBL0MsTyxrQkErQ0c7QUFDcEJ1QixFQUFBQSxVQUFVLEVBQUUsU0FEUTtBQUVwQkUsRUFBQUEsUUFBUSxFQUFFNUIsUUFBUSxDQUFDMEMsTUFGQztBQUdwQmpCLEVBQUFBLFNBQVMsRUFBRTtBQUhTLEM7O1NBL0NIdEIsTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgZGVib3VuY2UgZnJvbSAnbG9kYXNoLmRlYm91bmNlJ1xuaW1wb3J0IHsgUG9zaXRpb25lciB9IGZyb20gJy4uLy4uL3Bvc2l0aW9uZXInXG5pbXBvcnQgeyBQb3NpdGlvbiB9IGZyb20gJy4uLy4uL2NvbnN0YW50cydcbmltcG9ydCBUb29sdGlwU3RhdGVsZXNzIGZyb20gJy4vVG9vbHRpcFN0YXRlbGVzcydcblxubGV0IGlkQ291bnRlciA9IDBcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9vbHRpcCBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIC8qKlxuICAgICAqIFRoZSBhcHBlYXJhbmNlIG9mIHRoZSB0b29sdGlwLlxuICAgICAqL1xuICAgIGFwcGVhcmFuY2U6IFByb3BUeXBlcy5vbmVPZihbJ2RlZmF1bHQnLCAnY2FyZCddKS5pc1JlcXVpcmVkLFxuXG4gICAgLyoqXG4gICAgICogVGhlIHBvc2l0aW9uIHRoZSBQb3BvdmVyIGlzIG9uLlxuICAgICAqL1xuICAgIHBvc2l0aW9uOiBQcm9wVHlwZXMub25lT2YoW1xuICAgICAgUG9zaXRpb24uVE9QLFxuICAgICAgUG9zaXRpb24uVE9QX0xFRlQsXG4gICAgICBQb3NpdGlvbi5UT1BfUklHSFQsXG4gICAgICBQb3NpdGlvbi5CT1RUT00sXG4gICAgICBQb3NpdGlvbi5CT1RUT01fTEVGVCxcbiAgICAgIFBvc2l0aW9uLkJPVFRPTV9SSUdIVCxcbiAgICAgIFBvc2l0aW9uLkxFRlQsXG4gICAgICBQb3NpdGlvbi5SSUdIVFxuICAgIF0pLFxuXG4gICAgLyoqXG4gICAgICogVGhlIGNvbnRlbnQgb2YgdGhlIFBvcG92ZXIuXG4gICAgICovXG4gICAgY29udGVudDogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcblxuICAgIC8qKlxuICAgICAqIFRpbWUgaW4gbXMgYmVmb3JlIGhpZGluZyB0aGUgVG9vbHRpcC5cbiAgICAgKi9cbiAgICBoaWRlRGVsYXk6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gVHJ1ZSwgbWFudWFsbHkgc2hvdyB0aGUgVG9vbHRpcC5cbiAgICAgKi9cbiAgICBpc1Nob3duOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgIC8qKlxuICAgICAqIFRoZSB0YXJnZXQgYnV0dG9uIG9mIHRoZSBUb29sdGlwLlxuICAgICAqL1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuXG4gICAgLyoqXG4gICAgICogUHJvcGVydGllcyBwYXNzZWQgdGhyb3VnaCB0byB0aGUgVG9vbHRpcC5cbiAgICAgKi9cbiAgICBzdGF0ZWxlc3NQcm9wczogUHJvcFR5cGVzLm9iamVjdFxuICB9XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBhcHBlYXJhbmNlOiAnZGVmYXVsdCcsXG4gICAgcG9zaXRpb246IFBvc2l0aW9uLkJPVFRPTSxcbiAgICBoaWRlRGVsYXk6IDEyMFxuICB9XG5cbiAgY29uc3RydWN0b3IocHJvcHMsIGNvbnRleHQpIHtcbiAgICBzdXBlcihwcm9wcywgY29udGV4dClcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpZDogYGV2ZXJncmVlbi10b29sdGlwLSR7KytpZENvdW50ZXJ9YCxcbiAgICAgIGlzU2hvd246IHByb3BzLmlzU2hvd24sXG4gICAgICBpc1Nob3duQnlUYXJnZXQ6IGZhbHNlXG4gICAgfVxuXG4gICAgdGhpcy5oYW5kbGVNb3VzZUxlYXZlVGFyZ2V0ID0gZGVib3VuY2UoXG4gICAgICB0aGlzLmhhbmRsZU1vdXNlTGVhdmVUYXJnZXQsXG4gICAgICB0aGlzLnByb3BzLmhpZGVEZWxheVxuICAgIClcblxuICAgIHRoaXMuaGlkZSA9IGRlYm91bmNlKHRoaXMuaGlkZSwgdGhpcy5wcm9wcy5oaWRlRGVsYXkpXG4gIH1cblxuICBzaG93ID0gKCkgPT4ge1xuICAgIGlmICh0aGlzLnN0YXRlLmlzU2hvd24pIHJldHVyblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgaXNTaG93bjogdHJ1ZVxuICAgIH0pXG4gIH1cblxuICBoaWRlID0gKCkgPT4ge1xuICAgIGlmICghdGhpcy5zdGF0ZS5pc1Nob3duKSByZXR1cm5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGlzU2hvd246IGZhbHNlXG4gICAgfSlcbiAgfVxuXG4gIHJlbmRlclRhcmdldCA9ICh7IGdldFJlZiB9KSA9PiB7XG4gICAgY29uc3QgeyBjaGlsZHJlbiB9ID0gdGhpcy5wcm9wc1xuXG4gICAgY29uc3QgdG9vbHRpcFRhcmdldFByb3BzID0ge1xuICAgICAgb25Nb3VzZUVudGVyOiB0aGlzLnNob3csXG4gICAgICBvbk1vdXNlTGVhdmU6IHRoaXMuaGlkZSxcbiAgICAgICdhcmlhLWRlc2NyaWJlZGJ5JzogdGhpcy5zdGF0ZS5pZFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRvb2x0aXBzIGNhbiBiZSB1c2VkIHdpdGhpbiBhIFBvcG92ZXIgKG5vdCB0aGUgb3RoZXIgd2F5IGFyb3VuZClcbiAgICAgKiBXaGVuIGEgVG9vbHRpcCBpcyB1c2VkIHdpdGhpbiBhIFBvcG92ZXIsIHRoZSBQb3BvdmVyIHBhc3Nlc1xuICAgICAqIGl0cyBwcm9wcyB0byB0aGUgVG9vbHRpcCBpbiBhIGBwb3BvdmVyUHJvcHNgIG9iamVjdC5cbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvcHJvcC10eXBlc1xuICAgIGlmICh0aGlzLnByb3BzLnBvcG92ZXJQcm9wcykge1xuICAgICAgY29uc3Qge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvcHJvcC10eXBlc1xuICAgICAgICBnZXRUYXJnZXRSZWYsXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9wcm9wLXR5cGVzXG4gICAgICAgIGlzU2hvd24sXG4gICAgICAgIC4uLnBvcG92ZXJUYXJnZXRQcm9wc1xuICAgICAgfSA9IHRoaXMucHJvcHMucG9wb3ZlclByb3BzXG5cbiAgICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIHtcbiAgICAgICAgLy8gQWRkIHRoZSBQb3BvdmVyIHByb3BzIHRvIHRoZSB0YXJnZXQuXG4gICAgICAgIC4uLnBvcG92ZXJUYXJnZXRQcm9wcyxcbiAgICAgICAgLy8gQWRkIHRoZSBUb29sdGlwIHByb3BzIHRvIHRoZSB0YXJnZXQuXG4gICAgICAgIC4uLnRvb2x0aXBUYXJnZXRQcm9wcyxcblxuICAgICAgICBpbm5lclJlZjogcmVmID0+IHtcbiAgICAgICAgICAvLyBHZXQgdGhlIHJlZiBmb3IgdGhlIFRvb2x0aXAuXG4gICAgICAgICAgZ2V0UmVmKHJlZilcbiAgICAgICAgICAvLyBQYXNzIHRoZSByZWYgdG8gdGhlIFBvcG92ZXIuXG4gICAgICAgICAgZ2V0VGFyZ2V0UmVmKHJlZilcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXaXRoIG5vcm1hbCB1c2FnZSBvbmx5IHRoZSBwcm9wcyBmb3IgYSBUb29sdGlwIGFyZSBwYXNzZWQgdG8gdGhlIHRhcmdldC5cbiAgICAgKi9cbiAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCB7XG4gICAgICAuLi50b29sdGlwVGFyZ2V0UHJvcHMsXG4gICAgICBpbm5lclJlZjogcmVmID0+IHtcbiAgICAgICAgZ2V0UmVmKHJlZilcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgaXNQb3BvdmVyU2hvd24gPSAoKSA9PlxuICAgIHRoaXMucHJvcHMucG9wb3ZlclByb3BzICYmIHRoaXMucHJvcHMucG9wb3ZlclByb3BzLmlzU2hvd25cblxuICBoYW5kbGVNb3VzZUVudGVyVGFyZ2V0ID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgaXNTaG93bkJ5VGFyZ2V0OiB0cnVlXG4gICAgfSlcbiAgfVxuXG4gIGhhbmRsZU1vdXNlTGVhdmVUYXJnZXQgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBpc1Nob3duQnlUYXJnZXQ6IGZhbHNlXG4gICAgfSlcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBhcHBlYXJhbmNlLFxuICAgICAgaXNTaG93bixcbiAgICAgIGNvbnRlbnQsXG4gICAgICBwb3NpdGlvbixcbiAgICAgIHN0YXRlbGVzc1Byb3BzXG4gICAgfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCB7IGlzU2hvd246IHN0YXRlSXNTaG93biwgaXNTaG93bkJ5VGFyZ2V0IH0gPSB0aGlzLnN0YXRlXG5cbiAgICBsZXQgc2hvd24gPVxuICAgICAgKGlzU2hvd24gfHwgc3RhdGVJc1Nob3duIHx8IGlzU2hvd25CeVRhcmdldCkgJiYgIXRoaXMuaXNQb3BvdmVyU2hvd24oKVxuXG4gICAgLy8gVG9vbHRpcCB3YXMgZXhwbGljaXRseSBzZXQgdG8gbm90IGJlIHNob3duXG4gICAgaWYgKGlzU2hvd24gPT09IGZhbHNlKSB7XG4gICAgICBzaG93biA9IGZhbHNlXG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxQb3NpdGlvbmVyXG4gICAgICAgIHRhcmdldD17KHsgZ2V0UmVmIH0pID0+IHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJUYXJnZXQoeyBnZXRSZWYgfSlcbiAgICAgICAgfX1cbiAgICAgICAgaXNTaG93bj17c2hvd259XG4gICAgICAgIHBvc2l0aW9uPXtwb3NpdGlvbn1cbiAgICAgICAgYW5pbWF0aW9uRHVyYXRpb249ezE2MH1cbiAgICAgID5cbiAgICAgICAgeyh7IGNzcywgc3R5bGUsIHN0YXRlLCBnZXRSZWYgfSkgPT4gKFxuICAgICAgICAgIDxUb29sdGlwU3RhdGVsZXNzXG4gICAgICAgICAgICBpZD17dGhpcy5zdGF0ZS5pZH1cbiAgICAgICAgICAgIGFwcGVhcmFuY2U9e2FwcGVhcmFuY2V9XG4gICAgICAgICAgICBpbm5lclJlZj17cmVmID0+IGdldFJlZihyZWYpfVxuICAgICAgICAgICAgZGF0YS1zdGF0ZT17c3RhdGV9XG4gICAgICAgICAgICBjc3M9e2Nzc31cbiAgICAgICAgICAgIHN0eWxlPXtzdHlsZX1cbiAgICAgICAgICAgIG9uTW91c2VFbnRlcj17dGhpcy5oYW5kbGVNb3VzZUVudGVyVGFyZ2V0fVxuICAgICAgICAgICAgb25Nb3VzZUxlYXZlPXt0aGlzLmhhbmRsZU1vdXNlTGVhdmVUYXJnZXR9XG4gICAgICAgICAgICB7Li4uc3RhdGVsZXNzUHJvcHN9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2NvbnRlbnR9XG4gICAgICAgICAgPC9Ub29sdGlwU3RhdGVsZXNzPlxuICAgICAgICApfVxuICAgICAgPC9Qb3NpdGlvbmVyPlxuICAgIClcbiAgfVxufVxuIl19