import _extends from "@babel/runtime/helpers/esm/extends";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

/* eslint react/no-array-index-key: 0, eqeqeq: 0, no-eq-null: 0 */
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import Box from 'ui-box';
import { IconNames, IconSvgPaths16, IconSvgPaths20 } from '@blueprintjs/icons';
import { withTheme } from '../../theme';
export { IconNames };
/**
 * This implementation is a remix of the Icon component in Blueprintjs:
 * https://github.com/palantir/blueprint/blob/813e93f2/packages/core/src/components/icon/icon.tsx#L15
 * Refer to the LICENSE for BlueprintJS here: https://github.com/palantir/blueprint/blob/develop/LICENSE
 */

var Icon =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(Icon, _PureComponent);

  function Icon() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Icon);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Icon)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "renderSvgPaths", function (pathsSize, iconName) {
      var svgPathsRecord = pathsSize === Icon.SIZE_STANDARD ? IconSvgPaths16 : IconSvgPaths20;
      var pathStrings = svgPathsRecord[iconName];

      if (pathStrings == null) {
        return null;
      }

      return pathStrings.map(function (d, i) {
        return React.createElement("path", {
          key: i,
          d: d,
          fillRule: "evenodd"
        });
      });
    });

    return _this;
  }

  _createClass(Icon, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          theme = _this$props.theme,
          color = _this$props.color,
          icon = _this$props.icon,
          size = _this$props.size,
          _this$props$title = _this$props.title,
          title = _this$props$title === void 0 ? icon : _this$props$title,
          svgProps = _objectWithoutProperties(_this$props, ["theme", "color", "icon", "size", "title"]);

      var _this$props$style = this.props.style,
          style = _this$props$style === void 0 ? {} : _this$props$style;

      if (icon == null) {
        return null;
      }

      if (typeof icon !== 'string') {
        return icon;
      } // Choose which pixel grid is most appropriate for given icon size


      var pixelGridSize = size >= Icon.SIZE_LARGE ? Icon.SIZE_LARGE : Icon.SIZE_STANDARD;
      var paths = this.renderSvgPaths(pixelGridSize, icon);

      if (paths == null) {
        return null;
      }

      var viewBox = "0 0 ".concat(pixelGridSize, " ").concat(pixelGridSize);

      if (color != null) {
        style = _objectSpread({}, style, {
          fill: theme.getIconColor(color)
        });
      }

      return React.createElement(Box, _extends({
        is: "svg"
      }, svgProps, {
        style: style,
        "data-icon": icon,
        width: size,
        height: size,
        viewBox: viewBox
      }), title ? React.createElement("title", null, title) : null, paths);
    }
  }]);

  return Icon;
}(PureComponent);

Icon.displayName = "Icon";

_defineProperty(Icon, "SIZE_STANDARD", 16);

_defineProperty(Icon, "SIZE_LARGE", 20);

_defineProperty(Icon, "propTypes", {
  /**
   * Color of icon. Equivalent to setting CSS `fill` property.
   */
  color: PropTypes.string,

  /**
   * Name of a Blueprint UI icon, or an icon element, to render.
   * This prop is required because it determines the content of the component, but it can
   * be explicitly set to falsy values to render nothing.
   *
   * - If `null` or `undefined` or `false`, this component will render nothing.
   * - If given an `IconName` (a string literal union of all icon names),
   *   that icon will be rendered as an `<svg>` with `<path>` tags.
   * - If given a `JSX.Element`, that element will be rendered and _all other props on this component are ignored._
   *   This type is supported to simplify usage of this component in other Blueprint components.
   *   As a consumer, you should never use `<Icon icon={<element />}` directly; simply render `<element />` instead.
   */
  icon: PropTypes.string.isRequired,

  /**
   * Size of the icon, in pixels.
   * Blueprint contains 16px and 20px SVG icon images,
   * and chooses the appropriate resolution based on this prop.
   */
  size: PropTypes.number.isRequired,

  /**
   * Description string.
   * Browsers usually render this as a tooltip on hover, whereas screen
   * readers will use it for aural feedback.
   * By default, this is set to the icon's name for accessibility.
   */
  title: PropTypes.string,

  /**
   * CSS style properties.
   */
  style: PropTypes.object,

  /**
   * Theme provided by ThemeProvider.
   */
  theme: PropTypes.object.isRequired
});

_defineProperty(Icon, "defaultProps", {
  size: 16,
  color: 'currentColor'
});

export default withTheme(Icon);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,